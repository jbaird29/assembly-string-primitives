Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/08/21 23:27:51
4String Primitives and Macros     (Proj6_bairdjo.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_bairdjo.asm)

				; Author: Jon Baird
				; Last Modified: 3/4/2021
				; OSU email address: bairdjo@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number: 6                Due Date: 3/14/2021
				; Description: This program reads 10 signed integers from the user via console input
				;              then calculates the sum and average and displays to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mGetString MACRO promptAddress:REQ, outputAddress:REQ, size:REQ, bytesReadAddress:REQ
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					MOV		EDX, promptAddress
					CALL	WriteString
					MOV		EDX, outputAddress
					MOV		ECX, size
					CALL	ReadString
					MOV		EDI, bytesReadAddress
					MOV		[EDI], EAX
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				mDisplayString MACRO stringAddress:REQ
					PUSH	EDX
					MOV		EDX, stringAddress
					CALL	WriteString
					POP		EDX
				ENDM


				; (insert constant definitions here)
 = 00000003			TEST_COUNT = 3
				;MAX_NUM = 2147483647
				;MIN_NUM = -2147483648


 00000000			.data
 00000000  00000003 [		numArray		SDWORD	TEST_COUNT DUP(?)
	    00000000
	   ]
 0000000C 50 72 6F 6A 65	greeting		BYTE	"Project 6: Designing low-level I/O procedures.     By: Jon Baird",13,10,13,10,0
	   63 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   2E 20 20 20 20
	   20 42 79 3A 20
	   4A 6F 6E 20 42
	   61 69 72 64 0D
	   0A 0D 0A 00
 00000051 50 6C 65 61 73	instructions	BYTE	"Please provide 10 signed decimal integers. ",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 0D 0A
	   45 61 63 68 20
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A 41 66 74
	   65 72 20 79 6F
	   75 20 68 61 76
	   65 20 66 69 6E
	   69 73 68 65 64
	   20 69 6E 70 75
	   74 74 69 6E 67
	   20 74 68 65 20
	   72 61 77 20 6E
	   75 6D 62 65 72
	   73 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 0D 0A 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 0D 0A
	   0D 0A 00
										"Each number needs to be small enough to fit inside a 32 bit register. ",13,10,
										"After you have finished inputting the raw numbers I will display a list of the integers, ",13,10,
										"their sum, and their average value.",13,10,13,10,0
 00000149 50 6C 65 61 73	prompt			BYTE	"Please enter a signed intger: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   67 65 72 3A 20
	   00
 00000168 45 52 52 4F 52	invalidMsg		BYTE	"ERROR. You did not enter a signed number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00

 000001AF 00000000		sum				SDWORD	?
 000001B3 00000000		avg				SDWORD	?
 000001B7 59 6F 75 20 65	displayMsg		BYTE	"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001DC 54 68 65 20 73	sumMsg			BYTE	"The sum of these number is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 20 69
	   73 3A 20 00
 000001F9 54 68 65 20 72	avgMsg			BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000212 54 68 61 6E 6B	goodbyeMsg		BYTE	"Thanks for playing! ",13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   0D 0A 00

				; EXTRA CREDIT #1 variables
 00000229 00000000		lineNum			DWORD	?
 0000022D 54 68 65 20 63	currSumMsg		BYTE	"The current sum is: ",0
	   75 72 72 65 6E
	   74 20 73 75 6D
	   20 69 73 3A 20
	   00

				; EXTRA CREDIT #2 variables
 00000242  00000003 [		floatArray		REAL10	TEST_COUNT DUP(?)
	    00000000000000000000
	   ]
 00000260  00000003 [		digitCountArray	DWORD	TEST_COUNT DUP(?)
	    00000000
	   ]
 0000026C			floatSum		REAL10	?
	   00000000000000000000
 00000276			floatAvg		REAL10	?
	   00000000000000000000
 00000280 00000003		testCount		DWORD	TEST_COUNT
 00000284 50 6C 65 61 73	promptFloat		BYTE	"Please enter a floating point number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000002AB 45 52 52 4F 52	invalidMsgFloat	BYTE	"ERROR. You did not enter a valid floating point number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 76 61 6C
	   69 64 20 66 6C
	   6F 61 74 69 6E
	   67 20 70 6F 69
	   6E 74 20 6E 75
	   6D 62 65 72 20
	   6F 72 20 79 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 74
	   6F 6F 20 62 69
	   67 2E 0D 0A 00


 00000000			.code
 00000000			main PROC
				; ----------------------------------------------------------------------------------------------------
				; Introduction
				;    Display introduction messages
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET greeting
 00000000  52		     1		PUSH	EDX
 00000001  BA 0000000C R     1		MOV		EDX, OFFSET greeting
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX
					mDisplayString OFFSET instructions
 0000000C  52		     1		PUSH	EDX
 0000000D  BA 00000051 R     1		MOV		EDX, OFFSET instructions
 00000012  E8 00000000 E     1		CALL	WriteString
 00000017  5A		     1		POP		EDX
					

				; ----------------------------------------------------------------------------------------------------
				; ReadVal
				;    Test loop - build an array of numbers; dispaly line number and running sum
				; ----------------------------------------------------------------------------------------------------
 00000018  B9 00000003			MOV		ECX, LENGTHOF numArray
 0000001D  BF 00000000 R		MOV		EDI, OFFSET numArray
 00000022  C7 05 00000229 R		MOV		lineNum, 1
	   00000001
 0000002C			_buildArrayLoop:
					; print the line number
 0000002C  FF 35 00000229 R		PUSH	lineNum
 00000032  E8 000002BF			CALL	WriteVal
 00000037  B0 2D			MOV		AL, "-"
 00000039  E8 00000000 E		CALL	WriteChar
					; get a number via ReadVal, store into the currrent position of numArray
 0000003E  57				PUSH	EDI
 0000003F  68 00000168 R		PUSH	OFFSET invalidMsg
 00000044  68 00000149 R		PUSH	OFFSET prompt
 00000049  E8 000001FC			CALL	ReadVal
					; add the outputted number to sum
 0000004E  8B 07			MOV		EAX, [EDI]
 00000050  01 05 000001AF R		ADD		sum, EAX
					mDisplayString OFFSET currSumMsg
 00000056  52		     1		PUSH	EDX
 00000057  BA 0000022D R     1		MOV		EDX, OFFSET currSumMsg
 0000005C  E8 00000000 E     1		CALL	WriteString
 00000061  5A		     1		POP		EDX
 00000062  FF 35 000001AF R		PUSH	sum
 00000068  E8 00000289			CALL	WriteVal
 0000006D  E8 00000000 E		CALL	CrLf
					; increment to the next position of numArray
 00000072  83 C7 04			ADD		EDI, TYPE numArray
 00000075  FF 05 00000229 R		INC		lineNum
 0000007B  E2 AF			LOOP	_buildArrayLoop


				; ----------------------------------------------------------------------------------------------------
				; WriteVal
				;    Test loop - display the array of numbers 
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET displayMsg
 0000007D  52		     1		PUSH	EDX
 0000007E  BA 000001B7 R     1		MOV		EDX, OFFSET displayMsg
 00000083  E8 00000000 E     1		CALL	WriteString
 00000088  5A		     1		POP		EDX
 00000089  B9 00000003			MOV		ECX, LENGTHOF numArray
 0000008E  BE 00000000 R		MOV		ESI, OFFSET numArray
 00000093			_displayArrayLoop:
					; display the current element of numArray
 00000093  FF 36			PUSH	[ESI]
 00000095  E8 0000025C			CALL	WriteVal
 0000009A  83 C6 04			ADD		ESI, TYPE numArray
					; print a comma and space, unless it is the last element in the array
 0000009D  83 F9 01			CMP		ECX, 1
 000000A0  74 0E			JE		_noSeparator
 000000A2  B0 2C			MOV		AL, ","
 000000A4  E8 00000000 E		CALL	WriteChar
 000000A9  B0 20			MOV		AL, " "
 000000AB  E8 00000000 E		CALL	WriteChar
 000000B0				_noSeparator:
 000000B0  E2 E1			LOOP	_displayArrayLoop
 000000B2  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Integer Sum / Average
				;    Calculate and display the sum and average of the integers
				; ----------------------------------------------------------------------------------------------------
 000000B7  B9 00000003			MOV		ECX, LENGTHOF numArray
 000000BC  BE 00000000 R		MOV		ESI, OFFSET numArray
 000000C1  B8 00000000			MOV		EAX, 0
 000000C6  C7 05 000001B3 R		MOV		avg, 0
	   00000000
					; display the sum
					mDisplayString OFFSET sumMsg
 000000D0  52		     1		PUSH	EDX
 000000D1  BA 000001DC R     1		MOV		EDX, OFFSET sumMsg
 000000D6  E8 00000000 E     1		CALL	WriteString
 000000DB  5A		     1		POP		EDX
 000000DC  FF 35 000001AF R		PUSH	sum
 000000E2  E8 0000020F			CALL	WriteVal
 000000E7  E8 00000000 E		CALL	CrLf
					; calculate the average
 000000EC  A1 000001AF R		MOV		EAX, sum
 000000F1  99				CDQ
 000000F2  BB 00000003			MOV		EBX, TEST_COUNT
 000000F7  F7 FB			IDIV	EBX
 000000F9  A3 000001B3 R		MOV		avg, EAX
					; display the average
					mDisplayString OFFSET avgMsg
 000000FE  52		     1		PUSH	EDX
 000000FF  BA 000001F9 R     1		MOV		EDX, OFFSET avgMsg
 00000104  E8 00000000 E     1		CALL	WriteString
 00000109  5A		     1		POP		EDX
 0000010A  FF 35 000001B3 R		PUSH	avg
 00000110  E8 000001E1			CALL	WriteVal
 00000115  E8 00000000 E		CALL	CrLf
 0000011A  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; ReadFloatVal
				;    Test loop - build an array of floating point numbers
				; ----------------------------------------------------------------------------------------------------
 0000011F  B9 00000003			MOV		ECX, LENGTHOF floatArray
 00000124  BF 00000242 R		MOV		EDI, OFFSET floatArray
 00000129  BA 00000260 R		MOV		EDX, OFFSET digitCountArray
 0000012E  BB 00000000			MOV		EBX, 0								; EBX will hold the # of decimal point digits to display
 00000133  C7 05 00000229 R		MOV		lineNum, 1
	   00000001
 0000013D  9B DB E3			FINIT
 00000140  D9 EE			FLDZ
 00000142			_buildFloatArrayLoop:
					; print the line number
 00000142  FF 35 00000229 R		PUSH	lineNum
 00000148  E8 000001A9			CALL	WriteVal
 0000014D  B0 2D			MOV		AL, "-"
 0000014F  E8 00000000 E		CALL	WriteChar
					; get a number via ReadFloatVal, store into the currrent position of floatArray
 00000154  52				PUSH	EDX
 00000155  57				PUSH	EDI
 00000156  68 000002AB R		PUSH	OFFSET invalidMsgFloat
 0000015B  68 00000284 R		PUSH	OFFSET promptFloat
 00000160  E8 00000203			CALL	ReadFloatVal
					; see if the number of digits (after the decimal point) should be increased
 00000165  39 1A			CMP		[EDX], EBX
 00000167  72 02			JB		_skipUpdateMax
 00000169  8B 1A			MOV		EBX, [EDX]
 0000016B				_skipUpdateMax:
					; add this value to the prior value on the stack; print it using WriteFloatVal
					mDisplayString OFFSET currSumMsg
 0000016B  52		     1		PUSH	EDX
 0000016C  BA 0000022D R     1		MOV		EDX, OFFSET currSumMsg
 00000171  E8 00000000 E     1		CALL	WriteString
 00000176  5A		     1		POP		EDX
 00000177  DB 2F			FLD		REAL10 PTR [EDI]
 00000179  DE C1			FADD
 0000017B  53				PUSH	EBX
 0000017C  E8 000002F1			CALL	WriteFloatVal
 00000181  E8 00000000 E		CALL	CrLf
					; increment to the next position of numArray and digitCountArray
 00000186  83 C7 0A			ADD		EDI, TYPE floatArray
 00000189  83 C2 04			ADD		EDX, TYPE digitCountArray
 0000018C  FF 05 00000229 R		INC		lineNum
 00000192  E2 AE			LOOP	_buildFloatArrayLoop
					; upon completion of the loop, store the current sum into memory
 00000194  DB 3D 0000026C R		FSTP	floatSum

				; ----------------------------------------------------------------------------------------------------
				; WriteFloatVal
				;    Test loop - display the array of float numbers
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET displayMsg
 0000019A  52		     1		PUSH	EDX
 0000019B  BA 000001B7 R     1		MOV		EDX, OFFSET displayMsg
 000001A0  E8 00000000 E     1		CALL	WriteString
 000001A5  5A		     1		POP		EDX
 000001A6  B9 00000003			MOV		ECX, LENGTHOF floatArray
 000001AB  BE 00000242 R		MOV		ESI, OFFSET floatArray
 000001B0  BA 00000260 R		MOV		EDX, OFFSET digitCountArray
 000001B5			_displayFloatArrayLoop:
					; display the float in the current position of floatArray
 000001B5  9B DB E3			FINIT
 000001B8  DB 2E			FLD		REAL10 PTR [ESI]
 000001BA  FF 32			PUSH	DWORD PTR [EDX]
 000001BC  E8 000002B1			CALL	WriteFloatVal
					; inrement to the next position of numArray
 000001C1  83 C6 0A			ADD		ESI, TYPE floatArray
 000001C4  83 C2 04			ADD		EDX, TYPE digitCountArray
					; print a comma and space before the next value
 000001C7  83 F9 01			CMP		ECX, 1
 000001CA  74 0E			JE		_skipSeparator
 000001CC  B0 2C			MOV		AL, ","
 000001CE  E8 00000000 E		CALL	WriteChar
 000001D3  B0 20			MOV		AL, " "
 000001D5  E8 00000000 E		CALL	WriteChar
 000001DA				_skipSeparator:
 000001DA  E2 D9			LOOP	_displayFloatArrayLoop
 000001DC  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Float Sum / Aveage
				;    Calculate and display the sum and average of the numbers in the array
				; ----------------------------------------------------------------------------------------------------
					; calculate the average of the floatArray elemenets
 000001E1  9B DB E3			FINIT
 000001E4  DB 2D 0000026C R		FLD		floatSum
 000001EA  DB 05 00000280 R		FILD	testCount
 000001F0  DE F9			FDIV
 000001F2  DB 3D 00000276 R		FSTP	floatAvg
					; display the sum
					mDisplayString OFFSET sumMsg
 000001F8  52		     1		PUSH	EDX
 000001F9  BA 000001DC R     1		MOV		EDX, OFFSET sumMsg
 000001FE  E8 00000000 E     1		CALL	WriteString
 00000203  5A		     1		POP		EDX
 00000204  DB 2D 0000026C R		FLD		floatSum
 0000020A  53				PUSH	EBX									; push the 'max digits' calculated above
 0000020B  E8 00000262			CALL	WriteFloatVal
 00000210  E8 00000000 E		CALL	CrLf
					; display the average
					mDisplayString OFFSET avgMsg
 00000215  52		     1		PUSH	EDX
 00000216  BA 000001F9 R     1		MOV		EDX, OFFSET avgMsg
 0000021B  E8 00000000 E     1		CALL	WriteString
 00000220  5A		     1		POP		EDX
 00000221  DB 2D 00000276 R		FLD		floatAvg
 00000227  53				PUSH	EBX									; push the 'max digits' calculated above
 00000228  E8 00000245			CALL	WriteFloatVal
 0000022D  E8 00000000 E		CALL	CrLf
 00000232  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Goodbye
				;    Display goodbye message
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET goodbyeMsg
 00000237  52		     1		PUSH	EDX
 00000238  BA 00000212 R     1		MOV		EDX, OFFSET goodbyeMsg
 0000023D  E8 00000000 E     1		CALL	WriteString
 00000242  5A		     1		POP		EDX

					Invoke ExitProcess,0	; exit to operating system
 00000243  6A 00	   *	    push   +000000000h
 00000245  E8 00000000 E   *	    call   ExitProcess
 0000024A			main ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadVal
				; Description: Prompts the user to enter a signed number, and stores that number into a memory variable
				; Preconditions: the inputted number must fit into a SDWORD
				; Postconditions: prompt and/or error message is printed to the console
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the integer number will be saved
				; Returns:  signed number is saved into the memory address
				; ------------------------------------------------------------------------------------
 0000024A			ReadVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:DWORD, priorAccumulator:SDWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 0000024A  55		   *	    push   ebp
 0000024B  8B EC	   *	    mov    ebp, esp
 0000024D  83 C4 DC	   *	    add    esp, 0FFFFFFDCh
 00000250  50				PUSH	EAX
 00000251  53				PUSH	EBX
 00000252  51				PUSH	ECX
 00000253  52				PUSH	EDX
 00000254  56				PUSH	ESI
 00000255  57				PUSH	EDI
 00000256			_getString:
 00000256  8D 75 DC			LEA		ESI, stringNumber
 00000259  8D 7D F0			LEA		EDI, bytesInputted
 0000025C  C7 45 F4			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 00000263  52		     1		PUSH	EDX
 00000264  51		     1		PUSH	ECX
 00000265  50		     1		PUSH	EAX
 00000266  8B 55 08	     1		MOV		EDX, [EBP + 8]
 00000269  E8 00000000 E     1		CALL	WriteString
 0000026E  8B D6	     1		MOV		EDX, ESI
 00000270  8B 4D F4	     1		MOV		ECX, maxBytes
 00000273  E8 00000000 E     1		CALL	ReadString
 00000278  8B FF	     1		MOV		EDI, EDI
 0000027A  89 07	     1		MOV		[EDI], EAX
 0000027C  58		     1		POP		EAX
 0000027D  59		     1		POP		ECX
 0000027E  5A		     1		POP		EDX
					; set up the registers
 0000027F  8B 4D F0			MOV		ECX, bytesInputted			; length of string as the counter	
 00000282  8D 75 DC			LEA		ESI, stringNumber			; address of the integer string as source
 00000285  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (SDWORD)
 00000288  C7 45 FC			MOV		sign, 0						; set up the sign as 0 (for positive)
	   00000000
 0000028F  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 00000290  AC				LODSB
 00000291  3C 2B			CMP		AL, 43
 00000293  74 13			JE		_plusSymbol
 00000295  3C 2D			CMP		AL, 45
 00000297  74 08			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; empty accumulator to set up the loop
 00000299  4E				DEC		ESI
 0000029A  B8 00000000			MOV		EAX, 0
 0000029F  EB 0F			JMP		_charLoop

 000002A1			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 000002A1  C7 45 FC			MOV		sign, 1
	   00000001
 000002A8			_plusSymbol:
					; for either symbol, decrement the char count; empty accumulator to set up the loop
 000002A8  49				DEC		ECX
 000002A9  B8 00000000			MOV		EAX, 0
 000002AE  EB 00			JMP		_charLoop

 000002B0			_charLoop:
					; multiply accumulator by 10 and temporarily store into local variable
 000002B0  BB 0000000A			MOV		EBX, 10
 000002B5  F7 EB			IMUL	EBX
 000002B7  70 26			JO		_notValid
 000002B9  89 45 F8			MOV		priorAccumulator, EAX
					; load the integer string digit, subtract by 48 to convert from ASCII to integer number
 000002BC  B8 00000000			MOV		EAX, 0					; empty the upper range of the accumulator
 000002C1  AC				LODSB
 000002C2  3C 30			CMP		AL, 48
 000002C4  72 19			JB		_notValid
 000002C6  3C 39			CMP		AL, 57
 000002C8  77 15			JA		_notValid
 000002CA  2C 30			SUB		AL, 48
					; if sign is negative, change the value to negative
 000002CC  83 7D FC 00			CMP		sign, 0
 000002D0  74 02			JE		_positive
 000002D2  F7 D8			NEG		EAX	
 000002D4			_positive:
					; add the prior accumulator to this number and loop to next digit
 000002D4  03 45 F8			ADD		EAX, priorAccumulator
 000002D7  70 06			JO		_notValid
 000002D9  E2 D5			LOOP	_charLoop
					; store final value into the output and end
 000002DB  89 07			MOV		[EDI], EAX
 000002DD  EB 0D			JMP		_end

 000002DF			_notValid:
					; print an error message to the user and go back to get another string
 000002DF  8B 55 0C			MOV		EDX, [EBP + 12]
 000002E2  E8 00000000 E		CALL	WriteString
 000002E7  E9 FFFFFF6A			JMP		_getString

 000002EC			_end:
					; restore registers and return
 000002EC  5F				POP		EDI
 000002ED  5E				POP		ESI
 000002EE  5A				POP		EDX
 000002EF  59				POP		ECX
 000002F0  5B				POP		EBX
 000002F1  58				POP		EAX
 000002F2  C9		   *	    leave  
 000002F3  C2 000C			RET		12
 000002F6			ReadVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteVal
				; Description: Given a signed integer, converts the integer to a string and prints to the console
				; Preconditions: integer is a SDWORD or DWORD
				; Postconditions: integer is printed to the console
				; Receives: 
				;	[EBP + 8] = value of the number to convert to string & display
				; Returns: none
				; ------------------------------------------------------------------------------------
 000002F6			WriteVal PROC
					; preserve registers
					LOCAL	number:SDWORD, sign:DWORD, stringNumber[20]:BYTE
 000002F6  55		   *	    push   ebp
 000002F7  8B EC	   *	    mov    ebp, esp
 000002F9  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 000002FC  50				PUSH	EAX
 000002FD  53				PUSH	EBX
 000002FE  51				PUSH	ECX
 000002FF  52				PUSH	EDX
 00000300  56				PUSH	ESI
 00000301  57				PUSH	EDI
					
					; set up initial registers
 00000302  8B 75 08			MOV		ESI, [EBP + 8]
 00000305  89 75 FC			MOV		number, ESI					; move the number into local variable
 00000308  C7 45 F8			MOV		sign, 1						; set up the sign as 1 (for positive)
	   00000001
 0000030F  B9 00000014			MOV		ECX, LENGTHOF stringNumber	; length of destination in BYTES
 00000314  8D 7D E4			LEA		EDI, stringNumber			; address of destination (BYTE string)
 00000317  03 F9			ADD		EDI, ECX
 00000319  4F				DEC		EDI						; starting address + length - 1 = last element in string
 0000031A  FD				STD								; set the direction flag (to increment backwards)

					; put a null-terminator as the last element in destination string
 0000031B  B0 00			MOV		AL, 0
 0000031D  AA				STOSB

					; if number is negative, set the sign to be -1 (for negative) then convert number to positive
 0000031E  83 7D FC 00			CMP		number, 0
 00000322  7D 0A			JGE		_digitToStringLoop
 00000324  C7 45 F8			MOV		sign, -1
	   FFFFFFFF
 0000032B  F7 5D FC			NEG		number

 0000032E			_digitToStringLoop:
					; divide the number by 10, store the quotient as the next iteration's starting number
 0000032E  8B 45 FC			MOV		EAX, number
 00000331  BA 00000000			MOV		EDX, 0
 00000336  BB 0000000A			MOV		EBX, 10
 0000033B  F7 F3			DIV		EBX
 0000033D  89 45 FC			MOV		number, EAX
					; convert the remainder into its ASCII representation and store in the array
 00000340  8B C2			MOV		EAX, EDX
 00000342  04 30			ADD		AL, 48
 00000344  AA				STOSB
					; if the quotient is zero, the last digit has been reached
 00000345  83 7D FC 00			CMP		number, 0
 00000349  75 E3			JNE		_digitToStringLoop

					; if the sign was negative, prepend a '-' symbol
 0000034B  83 7D F8 FF			CMP		sign, -1
 0000034F  75 03			JNE		_displayString
 00000351  B0 2D			MOV		AL, "-"
 00000353  AA				STOSB

 00000354			_displayString:
 00000354  47				INC		EDI
					mDisplayString EDI
 00000355  52		     1		PUSH	EDX
 00000356  8B D7	     1		MOV		EDX, EDI
 00000358  E8 00000000 E     1		CALL	WriteString
 0000035D  5A		     1		POP		EDX

 0000035E			_end:
					; restore registers and return
 0000035E  5F				POP		EDI
 0000035F  5E				POP		ESI
 00000360  5A				POP		EDX
 00000361  59				POP		ECX
 00000362  5B				POP		EBX
 00000363  58				POP		EAX
 00000364  C9		   *	    leave  
 00000365  C2 0004			RET		4
 00000368			WriteVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadFloatVal
				; Description: prompts the user to enter a floating point number, converts it to REAL10, and stores in memory
				; Preconditions: FINIT must be initialized prior to calling ReadFloatVal; inputted number must fit in REAL10
				; Postconditions: prompt and/or error message is printed to the console
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the flot number will be saved
				;	[EBP + 20] = address of the location to which the number of digits inputted will be saved
				; Returns: the number in REAL10 format is saved into the given memory address
				; ------------------------------------------------------------------------------------
 00000368			ReadFloatVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:SDWORD, ten:DWORD, digit:DWORD, isLeadingZero:DWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 00000368  55		   *	    push   ebp
 00000369  8B EC	   *	    mov    ebp, esp
 0000036B  83 C4 D4	   *	    add    esp, 0FFFFFFD4h
 0000036E  50				PUSH	EAX
 0000036F  53				PUSH	EBX
 00000370  51				PUSH	ECX
 00000371  52				PUSH	EDX
 00000372  56				PUSH	ESI
 00000373  57				PUSH	EDI
 00000374			_getString:
 00000374  8D 75 D4			LEA		ESI, stringNumber
 00000377  8D 7D E8			LEA		EDI, bytesInputted
 0000037A  C7 45 EC			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 00000381  52		     1		PUSH	EDX
 00000382  51		     1		PUSH	ECX
 00000383  50		     1		PUSH	EAX
 00000384  8B 55 08	     1		MOV		EDX, [EBP + 8]
 00000387  E8 00000000 E     1		CALL	WriteString
 0000038C  8B D6	     1		MOV		EDX, ESI
 0000038E  8B 4D EC	     1		MOV		ECX, maxBytes
 00000391  E8 00000000 E     1		CALL	ReadString
 00000396  8B FF	     1		MOV		EDI, EDI
 00000398  89 07	     1		MOV		[EDI], EAX
 0000039A  58		     1		POP		EAX
 0000039B  59		     1		POP		ECX
 0000039C  5A		     1		POP		EDX
					; set up the registers
 0000039D  8B 55 14			MOV		EDX, [EBP + 20]
 000003A0  C7 02 00000000		MOV		DWORD PTR [EDX], 0			; holds a count of the number of digits inputted (needed for WriteFloatVal)
 000003A6  8B 4D E8			MOV		ECX, bytesInputted			; length of string as the counter	
 000003A9  8D 75 D4			LEA		ESI, stringNumber			; address of the integer string as source
 000003AC  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (REAL10)
 000003AF  C7 45 F0			MOV		isLeadingZero, 1			; set up a condition check for trailing zeros; this helps turn '9.9000' into '9.9' 
	   00000001
 000003B6  C7 45 FC			MOV		sign, 1						; set up the sign as 1 (for positive)
	   00000001
 000003BD  C7 45 F8			MOV		ten, 10						; put the value ten into a memory variable for FPU calcs
	   0000000A
 000003C4  D9 EE			FLDZ								; set ST(0) to zero
 000003C6  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 000003C7  AC				LODSB
 000003C8  3C 2B			CMP		AL, 43
 000003CA  74 0E			JE		_plusSymbol
 000003CC  3C 2D			CMP		AL, 45
 000003CE  74 03			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; set ST(0) as zero
 000003D0  4E				DEC		ESI
 000003D1  EB 0A			JMP		_intLoop

 000003D3			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 000003D3  C7 45 FC			MOV		sign, -1
	   FFFFFFFF
 000003DA			_plusSymbol:
					; for either symbol, decrement the char count; set ST(0) as zero
 000003DA  49				DEC		ECX
 000003DB  EB 00			JMP		_intLoop


 000003DD			_intLoop:
					; get the next digit in the string; validate & convert from ASCII to integer number
 000003DD  B8 00000000			MOV		EAX, 0
 000003E2  AC				LODSB
 000003E3  3C 2E			CMP		AL, 46
 000003E5  74 22			JE		_decimalPoint
 000003E7  3C 30			CMP		AL, 48
 000003E9  72 70			JB		_notValid
 000003EB  3C 39			CMP		AL, 57
 000003ED  77 6C			JA		_notValid
 000003EF  2C 30			SUB		AL, 48
					; multiply the prior value on the stack by 10
 000003F1  DB 45 F8			FILD	ten
 000003F4  DE C9			FMUL
					; load the digit onto the FPU stack
 000003F6  89 45 F4			MOV		digit, EAX
 000003F9  DB 45 F4			FILD	digit
					; multiply the value by the sign (either 1 or -1)
 000003FC  DB 45 FC			FILD	sign
 000003FF  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 00000401  DE C1			FADD
 00000403  E2 D8			LOOP	_intLoop
					; if all digits are read and no decimal point was reached, store final value into the output and end
 00000405  DB 3F			FSTP	REAL10 PTR [EDI]
 00000407  EB 5F			JMP		_end


 00000409			_decimalPoint:
					; start building the fractional part of the number
 00000409  49				DEC		ECX					; decrement ECX to account for the decimal point character
 0000040A  8D 75 D4			LEA		ESI, stringNumber	; change the address to the end of the string
 0000040D  03 75 E8			ADD		ESI, bytesInputted
 00000410  4E				DEC		ESI
 00000411  FD				STD							; set the direction flag to increment backwards
 00000412  D9 EE			FLDZ						; ST(1) holds the 'integer part'; initialize 'fractional part' at ST(0) as the value zero


 00000414			_floatLoop:
					; divide the prior value on the FPU stack by 10
 00000414  DB 45 F8			FILD	ten
 00000417  DE F9			FDIV
					; get the next digit in the string; validate & convert from ASCII to integer number
 00000419  B8 00000000			MOV		EAX, 0
 0000041E  AC				LODSB
 0000041F  3C 30			CMP		AL, 48
 00000421  72 38			JB		_notValid
 00000423  3C 39			CMP		AL, 57
 00000425  77 34			JA		_notValid
 00000427  2C 30			SUB		AL, 48
					; if the digit is not a zero, increment the digit counter
 00000429  3C 00			CMP		AL, 0
 0000042B  75 08			JNE		_incrementDigits
					; if the digit is a zero, but it is not a trailing zero (i.e. the zero in 9.908), increment the digit counter
 0000042D  83 7D F0 01			CMP		isLeadingZero, 1
 00000431  75 02			JNE		_incrementDigits
					; otherwise, skip incrementing the digit counter
 00000433  EB 0C			JMP		_skipIncrementDigits
 00000435				_incrementDigits:
 00000435  8B 55 14			MOV		EDX, [EBP + 20]
 00000438  FF 02			INC		DWORD PTR [EDX]
 0000043A  C7 45 F0			MOV		isLeadingZero, 0
	   00000000
 00000441				_skipIncrementDigits:
					; load the value onto the FPU stack and divide it by 10
 00000441  89 45 F4			MOV		digit, EAX
 00000444  DB 45 F4			FILD	digit
 00000447  DB 45 F8			FILD	ten
 0000044A  DE F9			FDIV
					; multiply the value by the sign (either 1 or -1)
 0000044C  DB 45 FC			FILD	sign
 0000044F  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 00000451  DE C1			FADD
 00000453  E2 BF			LOOP	_floatLoop
					; upon completion of all the 'fractional part' digits, add the integer part at ST(1) to the fractional part at ST(0)
 00000455  DE C1			FADD
 00000457  DB 3F			FSTP	REAL10 PTR [EDI]
 00000459  EB 0D			JMP		_end


 0000045B			_notValid:
					; print an error message to the user and go back to get another string
 0000045B  8B 55 0C			MOV		EDX, [EBP + 12]
 0000045E  E8 00000000 E		CALL	WriteString
 00000463  E9 FFFFFF0C			JMP		_getString


 00000468			_end:
					; restore registers and return
 00000468  5F				POP		EDI
 00000469  5E				POP		ESI
 0000046A  5A				POP		EDX
 0000046B  59				POP		ECX
 0000046C  5B				POP		EBX
 0000046D  58				POP		EAX
 0000046E  C9		   *	    leave  
 0000046F  C2 0010			RET		16
 00000472			ReadFloatVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteFloatVal
				; Description: Given a number in REAL10, converts the number to a string and prints to console
				; Preconditions: FPU stack is initialized with the given number at ST(0) in REAL10
				; Postconditions: number is printed to the console
				; Receives: 
				;	ST(0)	  = the float number to write
				;	[EBP + 8] = the number digits in the number (e.g. 987.1259 has 7 digits)
				; Returns:  none
				; ------------------------------------------------------------------------------------
 00000472			WriteFloatVal PROC
					LOCAL ten:DWORD, roundNormal:WORD, roundDown:WORD, exponent:DWORD, digit:DWORD, stringNumber[20]:BYTE, remainder:REAL10
 00000472  55		   *	    push   ebp
 00000473  8B EC	   *	    mov    ebp, esp
 00000475  83 C4 D0	   *	    add    esp, 0FFFFFFD0h
 00000478  50				PUSH	EAX
 00000479  53				PUSH	EBX
 0000047A  51				PUSH	ECX
 0000047B  52				PUSH	EDX
 0000047C  56				PUSH	ESI
 0000047D  57				PUSH	EDI


					; set up the initial register and local variable values
 0000047E  D9 C0			FLD		ST(0)							; create a copy of the number so as to not overwrite it
 00000480  C7 45 FC			MOV		ten, 10							; variable 10 used for FPU arithmetic
	   0000000A
 00000487  C7 45 F4			MOV		exponent, 0						; will hold the number of digits the dec point is shifted
	   00000000
 0000048E  C7 45 F0			MOV		digit, 0						; will hold the current digit in the string
	   00000000
 00000495  8D 7D DC			LEA		EDI, stringNumber				; EDI holds the address of the string representation
 00000498  FC				CLD										; iterate forwards through array
 00000499  B8 00000000			MOV		EAX, 0							; clear the accumulator
 0000049E  66| C7 45 F8			MOV		roundDown, 0000011101111111b	; default control word
	   077F
 000004A4  66| C7 45 FA			MOV		roundNormal, 0000001101111111b	; control word setting RC to round down
	   037F
 000004AA  D9 6D F8			FLDCW	roundDown						; set control word RC to roundDown


					; if ST(0) is negative, add a '-' as the first character in the string and convert to positive
 000004AD  D9 E4			FTST									; instruction for: CMP ST(0), 0.0
 000004AF  DF E0			FNSTSW	AX
 000004B1  9E				SAHF									; copy status word into EFLAGS
 000004B2  73 05			JAE		_SciNotationLoop
 000004B4  B0 2D			MOV		AL, "-"
 000004B6  AA				STOSB
 000004B7  D9 E1			FABS									; change float to absolute value	


					; this code block transforms '978.875' into '9.78875' while tracking the # of decimal point moves (into 'exponent' variable)
 000004B9			_SciNotationLoop:
					; check if the float is truncated to one digit
 000004B9  DB 55 F0			FIST	digit
 000004BC  83 7D F0 0A			CMP		digit, 10
 000004C0  72 0A			JB		_intToStringLoop
					; othwerwise divide the float by 10 and increment count of decimal point moves
 000004C2  DB 45 FC			FILD	ten
 000004C5  DE F9			FDIV
 000004C7  FF 45 F4			INC		exponent
 000004CA  EB ED			JMP		_SciNotationLoop


					; at this point, the float is at ST(0) and looks like '9.78875' and exponent would hold '2'
					; this code block dumps the integer part into a string representation digit by digit
 000004CC			_intToStringLoop:
					; add the leading digit to the string
 000004CC  DB 55 F0			FIST	digit
 000004CF  8B 45 F0			MOV		EAX, digit
 000004D2  83 C0 30			ADD		EAX, 48
 000004D5  AA				STOSB
					; subtract the digit from the float (e.g. 9.78875 - 9 = 0.78875)
 000004D6  DB 45 F0			FILD	digit
 000004D9  DE E9			FSUB
					; multiply that value by 10 to move the decimal point (e.g. 0.78875 * 10 = 7.8875)
 000004DB  DB 45 FC			FILD	ten
 000004DE  DE C9			FMUL
					; if the exponent counter == 0, add a decimal point to string, otherwise loop back to keep adding the integer parts
 000004E0  83 7D F4 00			CMP		exponent, 0
 000004E4  74 05			JE		_decimalPoint
 000004E6  FF 4D F4			DEC		exponent
 000004E9  EB E1			JMP		_intToStringLoop


					; add a decimal point to the string, set up the loop for the digits after the decimal point
 000004EB			_decimalPoint:
 000004EB  B0 2E			MOV		AL, "."
 000004ED  AA				STOSB
 000004EE  8B 4D 08			MOV		ECX, [EBP + 8]					; holds the number of decimal point digits in the number (e.g. 3 for above example)


					; this code block dumps the digits after the decimal point into the a string
 000004F1			_floatToStringLoop:
					; if this is the NOT the final digit continue rounding down; if it is the final digit, change rounding methodology to normal
 000004F1  83 F9 01			CMP		ECX, 1
 000004F4  75 03			JNE		_roundDown
 000004F6  D9 6D FA			FLDCW	roundNormal
 000004F9				_roundDown:
 000004F9  DB 55 F0			FIST	digit
					; add the digit to the string
 000004FC  8B 45 F0			MOV		EAX, digit
 000004FF  83 C0 30			ADD		EAX, 48
 00000502  AA				STOSB
					; subtract the digit from the float (e.g. 9.78875 - 9 = 0.78875)
 00000503  DB 45 F0			FILD	digit
 00000506  DE E9			FSUB
					; multiply that value by 10 to move the decimal point (e.g. 0.78875 * 10 = 7.8875)
 00000508  DB 45 FC			FILD	ten
 0000050B  DE C9			FMUL
 0000050D  E2 E2			LOOP	_floatToStringLoop
					

					; add a null-terminator as the final string character
 0000050F  DB 7D D2			FSTP	remainder
 00000512  B8 00000000			MOV		EAX, 0
 00000517  AA				STOSB
					; display the string
 00000518  8D 75 DC			LEA		ESI, stringNumber
					mDisplayString ESI
 0000051B  52		     1		PUSH	EDX
 0000051C  8B D6	     1		MOV		EDX, ESI
 0000051E  E8 00000000 E     1		CALL	WriteString
 00000523  5A		     1		POP		EDX


					; restore registers and return
 00000524  5F				POP		EDI
 00000525  5E				POP		ESI
 00000526  5A				POP		EDX
 00000527  59				POP		ECX
 00000528  5B				POP		EBX
 00000529  58				POP		EAX
 0000052A  C9		   *	    leave  
 0000052B  C2 0004			RET		4
 0000052E			WriteFloatVal ENDP



				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/08/21 23:27:51
4String Primitives and Macros     (Proj6_bairdjo.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000300 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000052E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloatVal . . . . . . . . . .	P Near	 00000368 _TEXT	Length= 0000010A Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  ten  . . . . . . . . . . . . .	DWord	 bp - 00000008
  digit  . . . . . . . . . . . .	DWord	 bp - 0000000C
  isLeadingZero  . . . . . . . .	DWord	 bp - 00000010
  maxBytes . . . . . . . . . . .	DWord	 bp - 00000014
  bytesInputted  . . . . . . . .	DWord	 bp - 00000018
  stringNumber . . . . . . . . .	Byte	 bp - 0000002C
  _getString . . . . . . . . . .	L Near	 00000374 _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 000003D3 _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 000003DA _TEXT	
  _intLoop . . . . . . . . . . .	L Near	 000003DD _TEXT	
  _decimalPoint  . . . . . . . .	L Near	 00000409 _TEXT	
  _floatLoop . . . . . . . . . .	L Near	 00000414 _TEXT	
  _incrementDigits . . . . . . .	L Near	 00000435 _TEXT	
  _skipIncrementDigits . . . . .	L Near	 00000441 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 0000045B _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000468 _TEXT	
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000024A _TEXT	Length= 000000AC Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  priorAccumulator . . . . . . .	DWord	 bp - 00000008
  maxBytes . . . . . . . . . . .	DWord	 bp - 0000000C
  bytesInputted  . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  _getString . . . . . . . . . .	L Near	 00000256 _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 000002A1 _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 000002A8 _TEXT	
  _charLoop  . . . . . . . . . .	L Near	 000002B0 _TEXT	
  _positive  . . . . . . . . . .	L Near	 000002D4 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 000002DF _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000002EC _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloatVal  . . . . . . . . .	P Near	 00000472 _TEXT	Length= 000000BC Public STDCALL
  ten  . . . . . . . . . . . . .	DWord	 bp - 00000004
  roundNormal  . . . . . . . . .	Word	 bp - 00000006
  roundDown  . . . . . . . . . .	Word	 bp - 00000008
  exponent . . . . . . . . . . .	DWord	 bp - 0000000C
  digit  . . . . . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  remainder  . . . . . . . . . .	TByte	 bp - 0000002E
  _SciNotationLoop . . . . . . .	L Near	 000004B9 _TEXT	
  _intToStringLoop . . . . . . .	L Near	 000004CC _TEXT	
  _decimalPoint  . . . . . . . .	L Near	 000004EB _TEXT	
  _floatToStringLoop . . . . . .	L Near	 000004F1 _TEXT	
  _roundDown . . . . . . . . . .	L Near	 000004F9 _TEXT	
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000002F6 _TEXT	Length= 00000072 Public STDCALL
  number . . . . . . . . . . . .	DWord	 bp - 00000004
  sign . . . . . . . . . . . . .	DWord	 bp - 00000008
  stringNumber . . . . . . . . .	Byte	 bp - 0000001C
  _digitToStringLoop . . . . . .	L Near	 0000032E _TEXT	
  _displayString . . . . . . . .	L Near	 00000354 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000035E _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000024A Public STDCALL
  _buildArrayLoop  . . . . . . .	L Near	 0000002C _TEXT	
  _displayArrayLoop  . . . . . .	L Near	 00000093 _TEXT	
  _noSeparator . . . . . . . . .	L Near	 000000B0 _TEXT	
  _buildFloatArrayLoop . . . . .	L Near	 00000142 _TEXT	
  _skipUpdateMax . . . . . . . .	L Near	 0000016B _TEXT	
  _displayFloatArrayLoop . . . .	L Near	 000001B5 _TEXT	
  _skipSeparator . . . . . . . .	L Near	 000001DA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEST_COUNT . . . . . . . . . . .	Number	 00000003h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 000001F9 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 000001B3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currSumMsg . . . . . . . . . . .	Byte	 0000022D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digitCountArray  . . . . . . . .	DWord	 00000260 _DATA	
displayMsg . . . . . . . . . . .	Byte	 000001B7 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
floatArray . . . . . . . . . . .	TByte	 00000242 _DATA	
floatAvg . . . . . . . . . . . .	TByte	 00000276 _DATA	
floatSum . . . . . . . . . . . .	TByte	 0000026C _DATA	
goodbyeMsg . . . . . . . . . . .	Byte	 00000212 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 0000000C _DATA	
instructions . . . . . . . . . .	Byte	 00000051 _DATA	
invalidMsgFloat  . . . . . . . .	Byte	 000002AB _DATA	
invalidMsg . . . . . . . . . . .	Byte	 00000168 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineNum  . . . . . . . . . . . .	DWord	 00000229 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
promptFloat  . . . . . . . . . .	Byte	 00000284 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000149 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumMsg . . . . . . . . . . . . .	Byte	 000001DC _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001AF _DATA	
testCount  . . . . . . . . . . .	DWord	 00000280 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
