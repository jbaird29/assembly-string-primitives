Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/08/21 20:18:41
4String Primitives and Macros     (Proj6_bairdjo.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_bairdjo.asm)

				; Author: Jon Baird
				; Last Modified: 3/4/2021
				; OSU email address: bairdjo@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number: 6                Due Date: 3/14/2021
				; Description: This program reads 10 signed integers from the user via console input
				;              then calculates the sum and average and displays to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mGetString MACRO promptAddress:REQ, outputAddress:REQ, size:REQ, bytesReadAddress:REQ
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					MOV		EDX, promptAddress
					CALL	WriteString
					MOV		EDX, outputAddress
					MOV		ECX, size
					CALL	ReadString
					MOV		EDI, bytesReadAddress
					MOV		[EDI], EAX
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				mDisplayString MACRO stringAddress:REQ
					PUSH	EDX
					MOV		EDX, stringAddress
					CALL	WriteString
					POP		EDX
				ENDM


				; (insert constant definitions here)
 = 00000003			TEST_COUNT = 3
				;MAX_NUM = 2147483647
				;MIN_NUM = -2147483648


 00000000			.data
 00000000  00000003 [		numArray		SDWORD	TEST_COUNT DUP(?)
	    00000000
	   ]
 0000000C 50 72 6F 6A 65	greeting		BYTE	"Project 6: Designing low-level I/O procedures.     By: Jon Baird",13,10,13,10,0
	   63 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   2E 20 20 20 20
	   20 42 79 3A 20
	   4A 6F 6E 20 42
	   61 69 72 64 0D
	   0A 0D 0A 00
 00000051 50 6C 65 61 73	instructions	BYTE	"Please provide 10 signed decimal integers. ",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 0D 0A
	   45 61 63 68 20
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A 41 66 74
	   65 72 20 79 6F
	   75 20 68 61 76
	   65 20 66 69 6E
	   69 73 68 65 64
	   20 69 6E 70 75
	   74 74 69 6E 67
	   20 74 68 65 20
	   72 61 77 20 6E
	   75 6D 62 65 72
	   73 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 0D 0A 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 0D 0A
	   0D 0A 00
										"Each number needs to be small enough to fit inside a 32 bit register. ",13,10,
										"After you have finished inputting the raw numbers I will display a list of the integers, ",13,10,
										"their sum, and their average value.",13,10,13,10,0
 00000149 50 6C 65 61 73	prompt			BYTE	"Please enter a signed intger: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   67 65 72 3A 20
	   00
 00000168 45 52 52 4F 52	invalidMsg		BYTE	"ERROR. You did not enter a signed number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00

 000001AF 00000000		sum				SDWORD	?
 000001B3 00000000		average			SDWORD	?
 000001B7 59 6F 75 20 65	displayMsg		BYTE	"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001DC 54 68 65 20 73	sumMsg			BYTE	"The sum of these number is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 20 69
	   73 3A 20 00
 000001F9 54 68 65 20 72	avgMsg			BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000212 54 68 61 6E 6B	goodbyeMsg		BYTE	"Thanks for playing! ",13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   0D 0A 00

				; EXTRA CREDIT variables
 00000229  00000003 [		floatArray		REAL10	TEST_COUNT DUP(?)
	    00000000000000000000
	   ]
 00000247  00000003 [		digitCountArray	DWORD	TEST_COUNT DUP(?)
	    00000000
	   ]
 00000253			floatSum		REAL10	?
	   00000000000000000000
 0000025D			floatAvg		REAL10	?
	   00000000000000000000
 00000267 00000003		testCount		DWORD	TEST_COUNT
 0000026B 50 6C 65 61 73	promptFloat		BYTE	"Please enter a floating point number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000292 45 52 52 4F 52	invalidMsgFloat	BYTE	"ERROR. You did not enter a valid floating point number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 76 61 6C
	   69 64 20 66 6C
	   6F 61 74 69 6E
	   67 20 70 6F 69
	   6E 74 20 6E 75
	   6D 62 65 72 20
	   6F 72 20 79 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 74
	   6F 6F 20 62 69
	   67 2E 0D 0A 00


 00000000			.code
 00000000			main PROC
				; ----------------------------------------------------------------------------------------------------
				; Introduction
				;    Display introduction messages
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET greeting
 00000000  52		     1		PUSH	EDX
 00000001  BA 0000000C R     1		MOV		EDX, OFFSET greeting
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX
					mDisplayString OFFSET instructions
 0000000C  52		     1		PUSH	EDX
 0000000D  BA 00000051 R     1		MOV		EDX, OFFSET instructions
 00000012  E8 00000000 E     1		CALL	WriteString
 00000017  5A		     1		POP		EDX
					


				; ----------------------------------------------------------------------------------------------------
				; ReadVal
				;    Test loop - build an array of numbers
				; ----------------------------------------------------------------------------------------------------
 00000018  B9 00000003			MOV		ECX, LENGTHOF numArray
 0000001D  BF 00000000 R		MOV		EDI, OFFSET numArray
 00000022			_buildArrayLoop:
					; get a number via ReadVal, store into the currrent position of numArray
 00000022  57				PUSH	EDI
 00000023  68 00000168 R		PUSH	OFFSET invalidMsg
 00000028  68 00000149 R		PUSH	OFFSET prompt
 0000002D  E8 000001BC			CALL	ReadVal
					; increment to the next position of numArray
 00000032  83 C7 04			ADD		EDI, TYPE numArray
 00000035  E2 EB			LOOP	_buildArrayLoop


				; ----------------------------------------------------------------------------------------------------
				; WriteVal
				;    Test loop - display the array of numbers 
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET displayMsg
 00000037  52		     1		PUSH	EDX
 00000038  BA 000001B7 R     1		MOV		EDX, OFFSET displayMsg
 0000003D  E8 00000000 E     1		CALL	WriteString
 00000042  5A		     1		POP		EDX
 00000043  B9 00000003			MOV		ECX, LENGTHOF numArray
 00000048  BE 00000000 R		MOV		ESI, OFFSET numArray
 0000004D			_displayArrayLoop:
					; display the current element of numArray
 0000004D  FF 36			PUSH	[ESI]
 0000004F  E8 00000246			CALL	WriteVal
 00000054  83 C6 04			ADD		ESI, TYPE numArray
					; print a comma and space, unless it is the last element in the array
 00000057  83 F9 01			CMP		ECX, 1
 0000005A  74 0E			JE		_noSeparator
 0000005C  B0 2C			MOV		AL, ","
 0000005E  E8 00000000 E		CALL	WriteChar
 00000063  B0 20			MOV		AL, " "
 00000065  E8 00000000 E		CALL	WriteChar
 0000006A				_noSeparator:
 0000006A  E2 E1			LOOP	_displayArrayLoop
 0000006C  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Integer Sum / Average
				;    Calculate and display the sum and average of the integers
				; ----------------------------------------------------------------------------------------------------
 00000071  B9 00000003			MOV		ECX, LENGTHOF numArray
 00000076  BE 00000000 R		MOV		ESI, OFFSET numArray
 0000007B  B8 00000000			MOV		EAX, 0
					; calculate the sum
 00000080			_calculateSumLoop:
 00000080  03 06			ADD		EAX, [ESI]
 00000082  83 C6 04			ADD		ESI, TYPE numArray
 00000085  E2 F9			LOOP	_calculateSumLoop
 00000087  A3 000001AF R		MOV		sum, EAX
					; display the sum
					mDisplayString OFFSET sumMsg
 0000008C  52		     1		PUSH	EDX
 0000008D  BA 000001DC R     1		MOV		EDX, OFFSET sumMsg
 00000092  E8 00000000 E     1		CALL	WriteString
 00000097  5A		     1		POP		EDX
 00000098  FF 35 000001AF R		PUSH	sum
 0000009E  E8 000001F7			CALL	WriteVal
 000000A3  E8 00000000 E		CALL	CrLf
					; calculate the average
 000000A8  A1 000001AF R		MOV		EAX, sum
 000000AD  99				CDQ
 000000AE  BB 00000003			MOV		EBX, TEST_COUNT
 000000B3  F7 FB			IDIV	EBX
 000000B5  A3 000001B3 R		MOV		average, EAX
					; display the average
					mDisplayString OFFSET avgMsg
 000000BA  52		     1		PUSH	EDX
 000000BB  BA 000001F9 R     1		MOV		EDX, OFFSET avgMsg
 000000C0  E8 00000000 E     1		CALL	WriteString
 000000C5  5A		     1		POP		EDX
 000000C6  FF 35 000001B3 R		PUSH	average
 000000CC  E8 000001C9			CALL	WriteVal
 000000D1  E8 00000000 E		CALL	CrLf
 000000D6  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; ReadFloatVal
				;    Test loop - build an array of floating point numbers
				; ----------------------------------------------------------------------------------------------------
 000000DB  B9 00000003			MOV		ECX, LENGTHOF floatArray
 000000E0  BF 00000229 R		MOV		EDI, OFFSET floatArray
 000000E5  BA 00000247 R		MOV		EDX, OFFSET digitCountArray
 000000EA			_buildFloatArrayLoop:
					; get a number via ReadFloatVal, store into the currrent position of floatArray
 000000EA  52				PUSH	EDX
 000000EB  57				PUSH	EDI
 000000EC  68 00000292 R		PUSH	OFFSET invalidMsgFloat
 000000F1  68 0000026B R		PUSH	OFFSET promptFloat
 000000F6  E8 00000211			CALL	ReadFloatVal
					; increment to the next position of numArray and digitCountArray
 000000FB  83 C7 0A			ADD		EDI, TYPE floatArray
 000000FE  83 C2 04			ADD		EDX, TYPE digitCountArray
 00000101  E2 E7			LOOP	_buildFloatArrayLoop


				; ----------------------------------------------------------------------------------------------------
				; WriteFloatVal
				;    Test loop - display the array of float numbers
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET displayMsg
 00000103  52		     1		PUSH	EDX
 00000104  BA 000001B7 R     1		MOV		EDX, OFFSET displayMsg
 00000109  E8 00000000 E     1		CALL	WriteString
 0000010E  5A		     1		POP		EDX
 0000010F  B9 00000003			MOV		ECX, LENGTHOF floatArray
 00000114  BE 00000229 R		MOV		ESI, OFFSET floatArray
 00000119  BA 00000247 R		MOV		EDX, OFFSET digitCountArray
 0000011E			_displayFloatArrayLoop:
					; display the float in the current position of floatArray
 0000011E  9B DB E3			FINIT
 00000121  DB 2E			FLD		REAL10 PTR [ESI]
 00000123  FF 32			PUSH	DWORD PTR [EDX]
 00000125  E8 000002F6			CALL	WriteFloatVal
					; inrement to the next position of numArray
 0000012A  83 C6 0A			ADD		ESI, TYPE floatArray
 0000012D  83 C2 04			ADD		EDX, TYPE digitCountArray
					; print a comma and space before the next value
 00000130  83 F9 01			CMP		ECX, 1
 00000133  74 0E			JE		_skipSeparator
 00000135  B0 2C			MOV		AL, ","
 00000137  E8 00000000 E		CALL	WriteChar
 0000013C  B0 20			MOV		AL, " "
 0000013E  E8 00000000 E		CALL	WriteChar
 00000143				_skipSeparator:
 00000143  E2 D9			LOOP	_displayFloatArrayLoop
 00000145  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Floats Sum / Aveage
				;    Calculate and display the sum and average of the numbers in the array
				; ----------------------------------------------------------------------------------------------------
					; calculate the average of the floatArray elemenets
 0000014A  B9 00000003			MOV		ECX, LENGTHOF floatArray
 0000014F  BE 00000229 R		MOV		ESI, OFFSET floatArray
 00000154  9B DB E3			FINIT
 00000157  D9 EE			FLDZ										; initialize FPU stack and set ST(0) to zero
 00000159			_calcFloatSumLoop:
					; create a running of of floatArray elements stored at ST(0)
 00000159  DB 2E			FLD		REAL10 PTR [ESI]
 0000015B  DE C1			FADD
 0000015D  83 C6 0A			ADD		ESI, TYPE floatArray
 00000160  E2 F7			LOOP	_calcFloatSumLoop
					; store the sum into memory; divide by count and store the average into memory
 00000162  DB 3D 00000253 R		FSTP	floatSum
 00000168  DB 2D 00000253 R		FLD		floatSum
 0000016E  DB 05 00000267 R		FILD	testCount
 00000174  DE F9			FDIV
 00000176  DB 3D 0000025D R		FSTP	floatAvg

					; calculate the maximum number of digits to display; store into EAX
 0000017C  B9 00000003			MOV		ECX, LENGTHOF digitCountArray
 00000181  BE 00000247 R		MOV		ESI, OFFSET digitCountArray
 00000186  B8 00000000			MOV		EAX, 0
 0000018B			_calcMaxDigitsLoop:
 0000018B  39 06			CMP		[ESI], EAX
 0000018D  72 02			JB		_notMax
 0000018F  8B 06			MOV		EAX, [ESI]
 00000191				_notMax:
 00000191  83 C6 04			ADD		ESI, TYPE digitCountArray
 00000194  E2 F5			LOOP	_calcMaxDigitsLoop

					; display the sum
					mDisplayString OFFSET sumMsg
 00000196  52		     1		PUSH	EDX
 00000197  BA 000001DC R     1		MOV		EDX, OFFSET sumMsg
 0000019C  E8 00000000 E     1		CALL	WriteString
 000001A1  5A		     1		POP		EDX
 000001A2  9B DB E3			FINIT
 000001A5  DB 2D 00000253 R		FLD		floatSum
 000001AB  50				PUSH	EAX									; push the 'max digits' calculated above
 000001AC  E8 0000026F			CALL	WriteFloatVal
 000001B1  E8 00000000 E		CALL	CrLf
					; display the average
					mDisplayString OFFSET avgMsg
 000001B6  52		     1		PUSH	EDX
 000001B7  BA 000001F9 R     1		MOV		EDX, OFFSET avgMsg
 000001BC  E8 00000000 E     1		CALL	WriteString
 000001C1  5A		     1		POP		EDX
 000001C2  9B DB E3			FINIT
 000001C5  DB 2D 0000025D R		FLD		floatAvg
 000001CB  50				PUSH	EAX									; push the 'max digits' calculated above
 000001CC  E8 0000024F			CALL	WriteFloatVal
 000001D1  E8 00000000 E		CALL	CrLf
 000001D6  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Goodbye
				;    Display goodbye message
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET goodbyeMsg
 000001DB  52		     1		PUSH	EDX
 000001DC  BA 00000212 R     1		MOV		EDX, OFFSET goodbyeMsg
 000001E1  E8 00000000 E     1		CALL	WriteString
 000001E6  5A		     1		POP		EDX

					Invoke ExitProcess,0	; exit to operating system
 000001E7  6A 00	   *	    push   +000000000h
 000001E9  E8 00000000 E   *	    call   ExitProcess
 000001EE			main ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the integer number will be saved
				; Returns:  [++++++++++++TBU++++++++++++]
				;
				; ------------------------------------------------------------------------------------
 000001EE			ReadVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:DWORD, priorAccumulator:SDWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 000001EE  55		   *	    push   ebp
 000001EF  8B EC	   *	    mov    ebp, esp
 000001F1  83 C4 DC	   *	    add    esp, 0FFFFFFDCh
 000001F4  50				PUSH	EAX
 000001F5  53				PUSH	EBX
 000001F6  51				PUSH	ECX
 000001F7  52				PUSH	EDX
 000001F8  56				PUSH	ESI
 000001F9  57				PUSH	EDI
 000001FA			_getString:
 000001FA  8D 75 DC			LEA		ESI, stringNumber
 000001FD  8D 7D F0			LEA		EDI, bytesInputted
 00000200  C7 45 F4			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 00000207  52		     1		PUSH	EDX
 00000208  51		     1		PUSH	ECX
 00000209  50		     1		PUSH	EAX
 0000020A  8B 55 08	     1		MOV		EDX, [EBP + 8]
 0000020D  E8 00000000 E     1		CALL	WriteString
 00000212  8B D6	     1		MOV		EDX, ESI
 00000214  8B 4D F4	     1		MOV		ECX, maxBytes
 00000217  E8 00000000 E     1		CALL	ReadString
 0000021C  8B FF	     1		MOV		EDI, EDI
 0000021E  89 07	     1		MOV		[EDI], EAX
 00000220  58		     1		POP		EAX
 00000221  59		     1		POP		ECX
 00000222  5A		     1		POP		EDX
					; set up the registers
 00000223  8B 4D F0			MOV		ECX, bytesInputted			; length of string as the counter	
 00000226  8D 75 DC			LEA		ESI, stringNumber			; address of the integer string as source
 00000229  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (SDWORD)
 0000022C  C7 45 FC			MOV		sign, 0						; set up the sign as 0 (for positive)
	   00000000
 00000233  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 00000234  AC				LODSB
 00000235  3C 2B			CMP		AL, 43
 00000237  74 13			JE		_plusSymbol
 00000239  3C 2D			CMP		AL, 45
 0000023B  74 08			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; empty accumulator to set up the loop
 0000023D  4E				DEC		ESI
 0000023E  B8 00000000			MOV		EAX, 0
 00000243  EB 0F			JMP		_charLoop

 00000245			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 00000245  C7 45 FC			MOV		sign, 1
	   00000001
 0000024C			_plusSymbol:
					; for either symbol, decrement the char count; empty accumulator to set up the loop
 0000024C  49				DEC		ECX
 0000024D  B8 00000000			MOV		EAX, 0
 00000252  EB 00			JMP		_charLoop

 00000254			_charLoop:
					; multiply accumulator by 10 and temporarily store into local variable
 00000254  BB 0000000A			MOV		EBX, 10
 00000259  F7 EB			IMUL	EBX
 0000025B  70 26			JO		_notValid
 0000025D  89 45 F8			MOV		priorAccumulator, EAX
					; load the integer string digit, subtract by 48 to convert from ASCII to integer number
 00000260  B8 00000000			MOV		EAX, 0					; empty the upper range of the accumulator
 00000265  AC				LODSB
 00000266  3C 30			CMP		AL, 48
 00000268  72 19			JB		_notValid
 0000026A  3C 39			CMP		AL, 57
 0000026C  77 15			JA		_notValid
 0000026E  2C 30			SUB		AL, 48
					; if sign is negative, change the value to negative
 00000270  83 7D FC 00			CMP		sign, 0
 00000274  74 02			JE		_positive
 00000276  F7 D8			NEG		EAX	
 00000278			_positive:
					; add the prior accumulator to this number and loop to next digit
 00000278  03 45 F8			ADD		EAX, priorAccumulator
 0000027B  70 06			JO		_notValid
 0000027D  E2 D5			LOOP	_charLoop
					; store final value into the output and end
 0000027F  89 07			MOV		[EDI], EAX
 00000281  EB 0D			JMP		_end

 00000283			_notValid:
					; print an error message to the user and go back to get another string
 00000283  8B 55 0C			MOV		EDX, [EBP + 12]
 00000286  E8 00000000 E		CALL	WriteString
 0000028B  E9 FFFFFF6A			JMP		_getString

 00000290			_end:
					; restore registers and return
 00000290  5F				POP		EDI
 00000291  5E				POP		ESI
 00000292  5A				POP		EDX
 00000293  59				POP		ECX
 00000294  5B				POP		EBX
 00000295  58				POP		EAX
 00000296  C9		   *	    leave  
 00000297  C2 000C			RET		12
 0000029A			ReadVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++] [the address of the location is long enough to store the value plus a null terminator (i.e. 12)]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	[EBP + 8] = value of the number to convert to string & display
				; Returns: [++++++++++++TBU++++++++++++]
				; ------------------------------------------------------------------------------------
 0000029A			WriteVal PROC
					; preserve registers
					LOCAL	number:SDWORD, sign:DWORD, stringNumber[20]:BYTE
 0000029A  55		   *	    push   ebp
 0000029B  8B EC	   *	    mov    ebp, esp
 0000029D  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 000002A0  50				PUSH	EAX
 000002A1  53				PUSH	EBX
 000002A2  51				PUSH	ECX
 000002A3  52				PUSH	EDX
 000002A4  56				PUSH	ESI
 000002A5  57				PUSH	EDI
					
					; set up initial registers
 000002A6  8B 75 08			MOV		ESI, [EBP + 8]
 000002A9  89 75 FC			MOV		number, ESI					; move the number into local variable
 000002AC  C7 45 F8			MOV		sign, 0						; set up the sign as 0 (for positive)
	   00000000
 000002B3  B9 00000014			MOV		ECX, LENGTHOF stringNumber	; length of destination in BYTES
 000002B8  8D 7D E4			LEA		EDI, stringNumber			; address of destination (BYTE string)
 000002BB  03 F9			ADD		EDI, ECX
 000002BD  4F				DEC		EDI						; starting address + length - 1 = last element in string
 000002BE  FD				STD								; set the direction flag (to increment backwards)

					; put a null-terminator as the last element in destination string
 000002BF  B0 00			MOV		AL, 0
 000002C1  AA				STOSB

					; if number is negative, make the first element of the string a '-', then convert number to positive
 000002C2  83 7D FC 00			CMP		number, 0
 000002C6  7D 0A			JGE		_digitToStringLoop
 000002C8  C7 45 F8			MOV		sign, 1
	   00000001
 000002CF  F7 5D FC			NEG		number

 000002D2			_digitToStringLoop:
					; divide the number by 10, store the quotient as the next iteration's starting number
 000002D2  8B 45 FC			MOV		EAX, number
 000002D5  BA 00000000			MOV		EDX, 0
 000002DA  BB 0000000A			MOV		EBX, 10
 000002DF  F7 F3			DIV		EBX
 000002E1  89 45 FC			MOV		number, EAX
					; convert the remainder into its ASCII representation and store in the array
 000002E4  8B C2			MOV		EAX, EDX
 000002E6  04 30			ADD		AL, 48
 000002E8  AA				STOSB
					; if the quotient is zero, the last digit has been reached
 000002E9  83 7D FC 00			CMP		number, 0
 000002ED  75 E3			JNE		_digitToStringLoop

					; if the sign was negative, prepend a '-' symbol
 000002EF  83 7D F8 01			CMP		sign, 1
 000002F3  75 03			JNE		_displayString
 000002F5  B0 2D			MOV		AL, "-"
 000002F7  AA				STOSB

 000002F8			_displayString:
 000002F8  47				INC		EDI
					mDisplayString EDI
 000002F9  52		     1		PUSH	EDX
 000002FA  8B D7	     1		MOV		EDX, EDI
 000002FC  E8 00000000 E     1		CALL	WriteString
 00000301  5A		     1		POP		EDX

 00000302			_end:
					; restore registers and return
 00000302  5F				POP		EDI
 00000303  5E				POP		ESI
 00000304  5A				POP		EDX
 00000305  59				POP		ECX
 00000306  5B				POP		EBX
 00000307  58				POP		EAX
 00000308  C9		   *	    leave  
 00000309  C2 0004			RET		4
 0000030C			WriteVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadFloatVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the flot number will be saved
				;	[EBP + 20] = address of the location to which the number of digits inputted will be saved
				; Returns:  [++++++++++++TBU++++++++++++]
				; ------------------------------------------------------------------------------------
 0000030C			ReadFloatVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:SDWORD, noLeadingZero:DWORD, ten:DWORD, digit:DWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 0000030C  55		   *	    push   ebp
 0000030D  8B EC	   *	    mov    ebp, esp
 0000030F  83 C4 D4	   *	    add    esp, 0FFFFFFD4h
 00000312  50				PUSH	EAX
 00000313  53				PUSH	EBX
 00000314  51				PUSH	ECX
 00000315  52				PUSH	EDX
 00000316  56				PUSH	ESI
 00000317  57				PUSH	EDI
 00000318			_getString:
 00000318  8D 75 D4			LEA		ESI, stringNumber
 0000031B  8D 7D E8			LEA		EDI, bytesInputted
 0000031E  C7 45 EC			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 00000325  52		     1		PUSH	EDX
 00000326  51		     1		PUSH	ECX
 00000327  50		     1		PUSH	EAX
 00000328  8B 55 08	     1		MOV		EDX, [EBP + 8]
 0000032B  E8 00000000 E     1		CALL	WriteString
 00000330  8B D6	     1		MOV		EDX, ESI
 00000332  8B 4D EC	     1		MOV		ECX, maxBytes
 00000335  E8 00000000 E     1		CALL	ReadString
 0000033A  8B FF	     1		MOV		EDI, EDI
 0000033C  89 07	     1		MOV		[EDI], EAX
 0000033E  58		     1		POP		EAX
 0000033F  59		     1		POP		ECX
 00000340  5A		     1		POP		EDX
					; set up the registers
 00000341  8B 55 14			MOV		EDX, [EBP + 20]
 00000344  C7 02 00000000		MOV		DWORD PTR [EDX], 0			; holds a count of the number of digits inputted (needed for WriteFloatVal)
 0000034A  8B 4D E8			MOV		ECX, bytesInputted			; length of string as the counter	
 0000034D  8D 75 D4			LEA		ESI, stringNumber			; address of the integer string as source
 00000350  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (REAL10)
 00000353  C7 45 FC			MOV		sign, 1						; set up the sign as 1 (for positive)
	   00000001
 0000035A  C7 45 F4			MOV		ten, 10						; put the value ten into a memory variable for FPU calcs
	   0000000A
 00000361  C7 45 F8			MOV		noLeadingZero, 0			; will be used to test for leading 0's in the string (i.e.  -00908.875)
	   00000000
 00000368  9B DB E3			FINIT								; initialize the FPU
 0000036B  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 0000036C  AC				LODSB
 0000036D  3C 2B			CMP		AL, 43
 0000036F  74 10			JE		_plusSymbol
 00000371  3C 2D			CMP		AL, 45
 00000373  74 05			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; set ST(0) as zero
 00000375  4E				DEC		ESI
 00000376  D9 EE			FLDZ
 00000378  EB 0C			JMP		_intLoop

 0000037A			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 0000037A  C7 45 FC			MOV		sign, -1
	   FFFFFFFF
 00000381			_plusSymbol:
					; for either symbol, decrement the char count; set ST(0) as zero
 00000381  49				DEC		ECX
 00000382  D9 EE			FLDZ
 00000384  EB 00			JMP		_intLoop


 00000386			_intLoop:
					; get the next digit in the string; validate & convert from ASCII to integer number
 00000386  B8 00000000			MOV		EAX, 0
 0000038B  AC				LODSB
 0000038C  3C 2E			CMP		AL, 46
 0000038E  74 3A			JE		_decimalPoint
 00000390  3C 30			CMP		AL, 48
 00000392  72 75			JB		_notValid
 00000394  3C 39			CMP		AL, 57
 00000396  77 71			JA		_notValid
 00000398  2C 30			SUB		AL, 48
					; if the digit is not a zero, increment the digit count
 0000039A  3C 00			CMP		AL, 0
 0000039C  75 08			JNE		_incrementDigitCount
					; if the digit is not a leading digit, increment the digit count
 0000039E  83 7D F8 00			CMP		noLeadingZero, 0
 000003A2  75 02			JNE		_incrementDigitCount
 000003A4  EB 0C			JMP		_skipIncrementDigitCount
 000003A6				_incrementDigitCount:
					; increment the count of digits inputted
 000003A6  C7 45 F8			MOV		noLeadingZero, 1
	   00000001
 000003AD  8B 55 14			MOV		EDX, [EBP + 20]
 000003B0  FF 02			INC		DWORD PTR [EDX]
 000003B2				_skipIncrementDigitCount:
					; multiply the prior value on the stack by 10
 000003B2  DB 45 F4			FILD	ten
 000003B5  DE C9			FMUL
					; load the digit onto the FPU stack
 000003B7  89 45 F0			MOV		digit, EAX
 000003BA  DB 45 F0			FILD	digit
					; multiply the value by the sign (either 1 or -1)
 000003BD  DB 45 FC			FILD	sign
 000003C0  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 000003C2  DE C1			FADD
 000003C4  E2 C0			LOOP	_intLoop

					; if all digits are read and no decimal point was reached, store final value into the output and end
 000003C6  DB 3F			FSTP	REAL10 PTR [EDI]
 000003C8  EB 4C			JMP		_end


 000003CA			_decimalPoint:
					; start building the fractional part of the number
 000003CA  49				DEC		ECX					; decrement ECX to account for the decimal point character
 000003CB  8D 75 D4			LEA		ESI, stringNumber	; change the address to the end of the string
 000003CE  03 75 E8			ADD		ESI, bytesInputted
 000003D1  4E				DEC		ESI
 000003D2  FD				STD							; set the direction flag to increment backwards
 000003D3  D9 EE			FLDZ						; ST(1) holds the 'integer part'; initialize 'fractional part' at ST(0) as the value zero

 000003D5			_floatLoop:
					; divide the prior value on the FPU stack by 10
 000003D5  DB 45 F4			FILD	ten
 000003D8  DE F9			FDIV
					; get the next digit in the string; validate & convert from ASCII to integer number
 000003DA  B8 00000000			MOV		EAX, 0
 000003DF  AC				LODSB
 000003E0  3C 30			CMP		AL, 48
 000003E2  72 25			JB		_notValid
 000003E4  3C 39			CMP		AL, 57
 000003E6  77 21			JA		_notValid
 000003E8  2C 30			SUB		AL, 48
					; increment the count of digits inputted
 000003EA  8B 55 14			MOV		EDX, [EBP + 20]
 000003ED  FF 02			INC		DWORD PTR [EDX]
					; load the value onto the FPU stack and divide it by 10
 000003EF  89 45 F0			MOV		digit, EAX
 000003F2  DB 45 F0			FILD	digit
 000003F5  DB 45 F4			FILD	ten
 000003F8  DE F9			FDIV
					; multiply the value by the sign (either 1 or -1)
 000003FA  DB 45 FC			FILD	sign
 000003FD  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 000003FF  DE C1			FADD
 00000401  E2 D2			LOOP	_floatLoop

					; upon completion of all the 'fractional part' digits, add the integer part at ST(1) to the fractional part at ST(0)
 00000403  DE C1			FADD
 00000405  DB 3F			FSTP	REAL10 PTR [EDI]
 00000407  EB 0D			JMP		_end


 00000409			_notValid:
					; print an error message to the user and go back to get another string
 00000409  8B 55 0C			MOV		EDX, [EBP + 12]
 0000040C  E8 00000000 E		CALL	WriteString
 00000411  E9 FFFFFF02			JMP		_getString


 00000416			_end:
					; restore registers and return
 00000416  5F				POP		EDI
 00000417  5E				POP		ESI
 00000418  5A				POP		EDX
 00000419  59				POP		ECX
 0000041A  5B				POP		EBX
 0000041B  58				POP		EAX
 0000041C  C9		   *	    leave  
 0000041D  C2 0010			RET		16
 00000420			ReadFloatVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteFloatVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	ST(0)	  = the float number to write
				;	[EBP + 8] = the number digits in the number (e.g. 987.1259 has 7 digits)
				; Returns:  [++++++++++++TBU++++++++++++]
				; ------------------------------------------------------------------------------------
 00000420			WriteFloatVal PROC
					LOCAL ten:DWORD, roundNormal:WORD, roundDown: WORD, exponent:DWORD, digit:DWORD, stringNumber[20]:BYTE
 00000420  55		   *	    push   ebp
 00000421  8B EC	   *	    mov    ebp, esp
 00000423  83 C4 DC	   *	    add    esp, 0FFFFFFDCh
 00000426  50				PUSH	EAX
 00000427  53				PUSH	EBX
 00000428  51				PUSH	ECX
 00000429  52				PUSH	EDX
 0000042A  56				PUSH	ESI
 0000042B  57				PUSH	EDI


					; set up the initial register and local variable values
 0000042C  C7 45 FC			MOV		ten, 10							; variable 10 used for FPU arithmetic
	   0000000A
 00000433  C7 45 F4			MOV		exponent, 0						; will hold the number of digits the dec point is shifted
	   00000000
 0000043A  C7 45 F0			MOV		digit, 0						; will hold the current digit in the string
	   00000000
 00000441  8D 7D DC			LEA		EDI, stringNumber				; EDI holds the address of the string representation
 00000444  FC				CLD										; iterate forwards through array
 00000445  8B 4D 08			MOV		ECX, [EBP + 8]					; counter holds the number of digits in the number
 00000448  B8 00000000			MOV		EAX, 0							; clear the accumulator
 0000044D  66| C7 45 F8			MOV		roundDown, 0000011101111111b	; default control word
	   077F
 00000453  66| C7 45 FA			MOV		roundNormal, 0000001101111111b	; control word setting RC to round down
	   037F
 00000459  D9 6D F8			FLDCW	roundDown						; set control word RC to roundDown


					; if ST(0) is negative, add a '-' as the first character in the string and convert to positive
 0000045C  D9 E4			FTST									; instruction for: CMP ST(0), 0.0
 0000045E  DF E0			FNSTSW	AX
 00000460  9E				SAHF									; copy status word into EFLAGS
 00000461  73 05			JAE		_SciNotationLoop
 00000463  B0 2D			MOV		AL, "-"
 00000465  AA				STOSB
 00000466  D9 E1			FABS									; change float to absolute value	


					; this code block transforms '978.875' into '9.78875' while tracking the # of decimal point moves (into 'exponent' variable)
 00000468			_SciNotationLoop:
					; check if the float is truncated to one digit
 00000468  DB 55 F0			FIST	digit
 0000046B  83 7D F0 0A			CMP		digit, 10
 0000046F  72 0A			JB		_toStringLoop
					; othwerwise divide the float by 10 and increment count of decimal point moves
 00000471  DB 45 FC			FILD	ten
 00000474  DE F9			FDIV
 00000476  FF 45 F4			INC		exponent
 00000479  EB ED			JMP		_SciNotationLoop


					; at this point, the float is at ST(0) and looks like '9.78875' and exponent holds '2'
					; this code block dumps the float into a string representation digit by digit; ECX has the number of digits (e.g. 6 for above example)
 0000047B			_toStringLoop:
					; if this is the NOT the final digit round down; if it is the final digit, round it (change control WORD to default)
 0000047B  83 F9 01			CMP		ECX, 1
 0000047E  75 03			JNE		_roundDown
 00000480  D9 6D FA			FLDCW	roundNormal
 00000483				_roundDown:
 00000483  DB 55 F0			FIST	digit
					; add the digit to the string
 00000486  8B 45 F0			MOV		EAX, digit
 00000489  83 C0 30			ADD		EAX, 48
 0000048C  AA				STOSB
					; subtract the digit from the float (e.g. 9.78875 - 9 = 0.78875)
 0000048D  DB 45 F0			FILD	digit
 00000490  DE E9			FSUB
					; multiply that value by 10 to move the decimal point (e.g. 0.78875 * 10 = 7.8875)
 00000492  DB 45 FC			FILD	ten
 00000495  DE C9			FMUL
					; if the exponent counter == 0, add a decimal point to the string output
 00000497  83 7D F4 00			CMP		exponent, 0
 0000049B  75 03			JNE		_skipDecimal
 0000049D  B0 2E			MOV		AL, "."
 0000049F  AA				STOSB
 000004A0				_skipDecimal:	
 000004A0  FF 4D F4			DEC		exponent
 000004A3  E2 D6			LOOP	_toStringLoop
					

					; add a null-terminator as the final string character
 000004A5  B8 00000000			MOV		EAX, 0
 000004AA  AA				STOSB
					; display the string
 000004AB  8D 75 DC			LEA		ESI, stringNumber
					mDisplayString ESI
 000004AE  52		     1		PUSH	EDX
 000004AF  8B D6	     1		MOV		EDX, ESI
 000004B1  E8 00000000 E     1		CALL	WriteString
 000004B6  5A		     1		POP		EDX


					; restore registers and return
 000004B7  5F				POP		EDI
 000004B8  5E				POP		ESI
 000004B9  5A				POP		EDX
 000004BA  59				POP		ECX
 000004BB  5B				POP		EBX
 000004BC  58				POP		EAX
 000004BD  C9		   *	    leave  
 000004BE  C2 0004			RET		4
 000004C1			WriteFloatVal ENDP



				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/08/21 20:18:41
4String Primitives and Macros     (Proj6_bairdjo.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002E7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004C1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloatVal . . . . . . . . . .	P Near	 0000030C _TEXT	Length= 00000114 Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  noLeadingZero  . . . . . . . .	DWord	 bp - 00000008
  ten  . . . . . . . . . . . . .	DWord	 bp - 0000000C
  digit  . . . . . . . . . . . .	DWord	 bp - 00000010
  maxBytes . . . . . . . . . . .	DWord	 bp - 00000014
  bytesInputted  . . . . . . . .	DWord	 bp - 00000018
  stringNumber . . . . . . . . .	Byte	 bp - 0000002C
  _getString . . . . . . . . . .	L Near	 00000318 _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 0000037A _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 00000381 _TEXT	
  _intLoop . . . . . . . . . . .	L Near	 00000386 _TEXT	
  _incrementDigitCount . . . . .	L Near	 000003A6 _TEXT	
  _skipIncrementDigitCount . . .	L Near	 000003B2 _TEXT	
  _decimalPoint  . . . . . . . .	L Near	 000003CA _TEXT	
  _floatLoop . . . . . . . . . .	L Near	 000003D5 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 00000409 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000416 _TEXT	
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000001EE _TEXT	Length= 000000AC Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  priorAccumulator . . . . . . .	DWord	 bp - 00000008
  maxBytes . . . . . . . . . . .	DWord	 bp - 0000000C
  bytesInputted  . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  _getString . . . . . . . . . .	L Near	 000001FA _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 00000245 _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 0000024C _TEXT	
  _charLoop  . . . . . . . . . .	L Near	 00000254 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000278 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 00000283 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000290 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloatVal  . . . . . . . . .	P Near	 00000420 _TEXT	Length= 000000A1 Public STDCALL
  ten  . . . . . . . . . . . . .	DWord	 bp - 00000004
  roundNormal  . . . . . . . . .	Word	 bp - 00000006
  roundDown  . . . . . . . . . .	Word	 bp - 00000008
  exponent . . . . . . . . . . .	DWord	 bp - 0000000C
  digit  . . . . . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  _SciNotationLoop . . . . . . .	L Near	 00000468 _TEXT	
  _toStringLoop  . . . . . . . .	L Near	 0000047B _TEXT	
  _roundDown . . . . . . . . . .	L Near	 00000483 _TEXT	
  _skipDecimal . . . . . . . . .	L Near	 000004A0 _TEXT	
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000029A _TEXT	Length= 00000072 Public STDCALL
  number . . . . . . . . . . . .	DWord	 bp - 00000004
  sign . . . . . . . . . . . . .	DWord	 bp - 00000008
  stringNumber . . . . . . . . .	Byte	 bp - 0000001C
  _digitToStringLoop . . . . . .	L Near	 000002D2 _TEXT	
  _displayString . . . . . . . .	L Near	 000002F8 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000302 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001EE Public STDCALL
  _buildArrayLoop  . . . . . . .	L Near	 00000022 _TEXT	
  _displayArrayLoop  . . . . . .	L Near	 0000004D _TEXT	
  _noSeparator . . . . . . . . .	L Near	 0000006A _TEXT	
  _calculateSumLoop  . . . . . .	L Near	 00000080 _TEXT	
  _buildFloatArrayLoop . . . . .	L Near	 000000EA _TEXT	
  _displayFloatArrayLoop . . . .	L Near	 0000011E _TEXT	
  _skipSeparator . . . . . . . .	L Near	 00000143 _TEXT	
  _calcFloatSumLoop  . . . . . .	L Near	 00000159 _TEXT	
  _calcMaxDigitsLoop . . . . . .	L Near	 0000018B _TEXT	
  _notMax  . . . . . . . . . . .	L Near	 00000191 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEST_COUNT . . . . . . . . . . .	Number	 00000003h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 000001B3 _DATA	
avgMsg . . . . . . . . . . . . .	Byte	 000001F9 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digitCountArray  . . . . . . . .	DWord	 00000247 _DATA	
displayMsg . . . . . . . . . . .	Byte	 000001B7 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
floatArray . . . . . . . . . . .	TByte	 00000229 _DATA	
floatAvg . . . . . . . . . . . .	TByte	 0000025D _DATA	
floatSum . . . . . . . . . . . .	TByte	 00000253 _DATA	
goodbyeMsg . . . . . . . . . . .	Byte	 00000212 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 0000000C _DATA	
instructions . . . . . . . . . .	Byte	 00000051 _DATA	
invalidMsgFloat  . . . . . . . .	Byte	 00000292 _DATA	
invalidMsg . . . . . . . . . . .	Byte	 00000168 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
promptFloat  . . . . . . . . . .	Byte	 0000026B _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000149 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumMsg . . . . . . . . . . . . .	Byte	 000001DC _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001AF _DATA	
testCount  . . . . . . . . . . .	DWord	 00000267 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
