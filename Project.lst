Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/09/21 00:05:07
4String Primitives and Macros     (Proj6_bairdjo.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_bairdjo.asm)

				; Author: Jon Baird
				; Last Modified: 3/4/2021
				; OSU email address: bairdjo@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number: 6                Due Date: 3/14/2021
				; Description: This program reads 10 signed integers from the user via console input
				;              then calculates the sum and average and displays to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ------------------------------------------------------------------------------------
				; Name: mGetString
				; Description: Prompts the user to enter a string and stores it into memory variable
				; Preconditions: uses registers EAX, ECX, and EDX
				; Postconditions: prompt printed to the console
				; Receives: 
				;	promptAddress = address, where a prompt message to the user is stored
				;	outputAddress = address, where the inputted string will be saved
				;	size = value, the maximum number of bytes which can be inputted
				;   bytesReadAddress = address, where the number of bytes inputted by the user will be saved
				; Returns:  string is saved into given memory address
				; ------------------------------------------------------------------------------------
				mGetString MACRO promptAddress:REQ, outputAddress:REQ, size:REQ, bytesReadAddress:REQ
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					MOV		EDX, promptAddress
					CALL	WriteString
					MOV		EDX, outputAddress
					MOV		ECX, size
					CALL	ReadString
					MOV		EDI, bytesReadAddress
					MOV		[EDI], EAX
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM


				; ------------------------------------------------------------------------------------
				; Name: mDisplayString
				; Description: A string is printed to the console
				; Preconditions: uses registers EDX
				; Postconditions: string is printed to the console
				; Receives: 
				;	stringAddress = address, where a the string to be printed is saved
				; Returns:  none
				; ------------------------------------------------------------------------------------
				mDisplayString MACRO stringAddress:REQ
					PUSH	EDX
					MOV		EDX, stringAddress
					CALL	WriteString
					POP		EDX
				ENDM


 = 00000003			TEST_COUNT = 3
				;MAX_NUM = 2147483647
				;MIN_NUM = -2147483648


 00000000			.data
 00000000  00000003 [		numArray		SDWORD	TEST_COUNT DUP(?)
	    00000000
	   ]
 0000000C 50 72 6F 6A 65	greeting		BYTE	"Project 6: Designing low-level I/O procedures.     By: Jon Baird",13,10,13,10,0
	   63 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   2E 20 20 20 20
	   20 42 79 3A 20
	   4A 6F 6E 20 42
	   61 69 72 64 0D
	   0A 0D 0A 00
 00000051 50 6C 65 61 73	instructions	BYTE	"Please provide 10 signed decimal integers. ",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 0D 0A
	   45 61 63 68 20
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A 41 66 74
	   65 72 20 79 6F
	   75 20 68 61 76
	   65 20 66 69 6E
	   69 73 68 65 64
	   20 69 6E 70 75
	   74 74 69 6E 67
	   20 74 68 65 20
	   72 61 77 20 6E
	   75 6D 62 65 72
	   73 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 0D 0A 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 0D 0A
	   0D 0A 00
										"Each number needs to be small enough to fit inside a 32 bit register. ",13,10,
										"After you have finished inputting the raw numbers I will display a list of the integers, ",13,10,
										"their sum, and their average value.",13,10,13,10,0
 00000149 50 6C 65 61 73	prompt			BYTE	"Please enter a signed intger: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   67 65 72 3A 20
	   00
 00000168 45 52 52 4F 52	invalidMsg		BYTE	"ERROR. You did not enter a signed number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00

 000001AF 00000000		sum				SDWORD	?
 000001B3 00000000		avg				SDWORD	?
 000001B7 59 6F 75 20 65	displayMsg		BYTE	"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001DC 54 68 65 20 73	sumMsg			BYTE	"The sum of these number is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 20 69
	   73 3A 20 00
 000001F9 54 68 65 20 72	avgMsg			BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000212 54 68 61 6E 6B	goodbyeMsg		BYTE	"Thanks for playing! ",13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   0D 0A 00

				; EXTRA CREDIT #1 variables
 00000229 45 43 3A 20 4E	ecMsg1			BYTE	"EC: Numbers lines and displays a running total",13,10,0
	   75 6D 62 65 72
	   73 20 6C 69 6E
	   65 73 20 61 6E
	   64 20 64 69 73
	   70 6C 61 79 73
	   20 61 20 72 75
	   6E 6E 69 6E 67
	   20 74 6F 74 61
	   6C 0D 0A 00
 0000025A 00000000		lineNum			DWORD	?
 0000025E 54 68 65 20 63	currSumMsg		BYTE	"The current sum is: ",0
	   75 72 72 65 6E
	   74 20 73 75 6D
	   20 69 73 3A 20
	   00

				; EXTRA CREDIT #2 variables
 00000273 45 43 3A 20 41	ecMsg2			BYTE	"EC: Adds procedures ReadFloatVal and WriteFloatVal",13,10,0
	   64 64 73 20 70
	   72 6F 63 65 64
	   75 72 65 73 20
	   52 65 61 64 46
	   6C 6F 61 74 56
	   61 6C 20 61 6E
	   64 20 57 72 69
	   74 65 46 6C 6F
	   61 74 56 61 6C
	   0D 0A 00
 000002A8  00000003 [		floatArray		REAL10	TEST_COUNT DUP(?)
	    00000000000000000000
	   ]
 000002C6  00000003 [		digitCountArray	DWORD	TEST_COUNT DUP(?)
	    00000000
	   ]
 000002D2			floatSum		REAL10	?
	   00000000000000000000
 000002DC			floatAvg		REAL10	?
	   00000000000000000000
 000002E6 00000003		testCount		DWORD	TEST_COUNT
 000002EA 50 6C 65 61 73	promptFloat		BYTE	"Please enter a floating point number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000311 45 52 52 4F 52	invalidMsgFloat	BYTE	"ERROR. You did not enter a valid floating point number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 76 61 6C
	   69 64 20 66 6C
	   6F 61 74 69 6E
	   67 20 70 6F 69
	   6E 74 20 6E 75
	   6D 62 65 72 20
	   6F 72 20 79 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 74
	   6F 6F 20 62 69
	   67 2E 0D 0A 00

 00000366			floatNum		REAL10	?
	   00000000000000000000
 00000370 00000000		floatDigit		DWORD	?

 00000000			.code
 00000000			main PROC
					; get a number via ReadFloatVal, store into the currrent position of floatArray
 00000000  68 00000370 R		PUSH	OFFSET floatDigit
 00000005  68 00000366 R		PUSH	OFFSET floatNum
 0000000A  68 00000311 R		PUSH	OFFSET invalidMsgFloat
 0000000F  68 000002EA R		PUSH	OFFSET promptFloat
 00000014  E8 0000039B			CALL	ReadFloatVal
 00000019  DB 2D 00000366 R		FLD		floatNum
 0000001F  FF 35 00000370 R		PUSH	floatDigit
 00000025  E8 00000494			CALL	WriteFloatVal
 0000002A  E8 00000000 E		CALL	CrLf
					; WriteFloatVal BREAKS IN THE FOLLOWING TEST CASES:
					;  10.0
					;  10

					
				; ----------------------------------------------------------------------------------------------------
				; Introduction
				;    Display introduction messages
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET greeting
 0000002F  52		     1		PUSH	EDX
 00000030  BA 0000000C R     1		MOV		EDX, OFFSET greeting
 00000035  E8 00000000 E     1		CALL	WriteString
 0000003A  5A		     1		POP		EDX
					mDisplayString OFFSET instructions
 0000003B  52		     1		PUSH	EDX
 0000003C  BA 00000051 R     1		MOV		EDX, OFFSET instructions
 00000041  E8 00000000 E     1		CALL	WriteString
 00000046  5A		     1		POP		EDX
					mDisplayString OFFSET ecMsg1
 00000047  52		     1		PUSH	EDX
 00000048  BA 00000229 R     1		MOV		EDX, OFFSET ecMsg1
 0000004D  E8 00000000 E     1		CALL	WriteString
 00000052  5A		     1		POP		EDX
					mDisplayString OFFSET ecMsg2
 00000053  52		     1		PUSH	EDX
 00000054  BA 00000273 R     1		MOV		EDX, OFFSET ecMsg2
 00000059  E8 00000000 E     1		CALL	WriteString
 0000005E  5A		     1		POP		EDX
 0000005F  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; ReadVal
				;    Test loop - build an array of numbers; dispaly line number and running sum
				; ----------------------------------------------------------------------------------------------------
 00000064  B9 00000003			MOV		ECX, LENGTHOF numArray
 00000069  BF 00000000 R		MOV		EDI, OFFSET numArray
 0000006E  C7 05 0000025A R		MOV		lineNum, 1
	   00000001
 00000078			_buildArrayLoop:
					; print the line number
 00000078  FF 35 0000025A R		PUSH	lineNum
 0000007E  E8 000002BF			CALL	WriteVal
 00000083  B0 2D			MOV		AL, "-"
 00000085  E8 00000000 E		CALL	WriteChar
					; get a number via ReadVal, store into the currrent position of numArray
 0000008A  57				PUSH	EDI
 0000008B  68 00000168 R		PUSH	OFFSET invalidMsg
 00000090  68 00000149 R		PUSH	OFFSET prompt
 00000095  E8 000001FC			CALL	ReadVal
					; add the outputted number to sum
 0000009A  8B 07			MOV		EAX, [EDI]
 0000009C  01 05 000001AF R		ADD		sum, EAX
					mDisplayString OFFSET currSumMsg
 000000A2  52		     1		PUSH	EDX
 000000A3  BA 0000025E R     1		MOV		EDX, OFFSET currSumMsg
 000000A8  E8 00000000 E     1		CALL	WriteString
 000000AD  5A		     1		POP		EDX
 000000AE  FF 35 000001AF R		PUSH	sum
 000000B4  E8 00000289			CALL	WriteVal
 000000B9  E8 00000000 E		CALL	CrLf
					; increment to the next position of numArray
 000000BE  83 C7 04			ADD		EDI, TYPE numArray
 000000C1  FF 05 0000025A R		INC		lineNum
 000000C7  E2 AF			LOOP	_buildArrayLoop


				; ----------------------------------------------------------------------------------------------------
				; WriteVal
				;    Test loop - display the array of numbers 
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET displayMsg
 000000C9  52		     1		PUSH	EDX
 000000CA  BA 000001B7 R     1		MOV		EDX, OFFSET displayMsg
 000000CF  E8 00000000 E     1		CALL	WriteString
 000000D4  5A		     1		POP		EDX
 000000D5  B9 00000003			MOV		ECX, LENGTHOF numArray
 000000DA  BE 00000000 R		MOV		ESI, OFFSET numArray
 000000DF			_displayArrayLoop:
					; display the current element of numArray
 000000DF  FF 36			PUSH	[ESI]
 000000E1  E8 0000025C			CALL	WriteVal
 000000E6  83 C6 04			ADD		ESI, TYPE numArray
					; print a comma and space, unless it is the last element in the array
 000000E9  83 F9 01			CMP		ECX, 1
 000000EC  74 0E			JE		_noSeparator
 000000EE  B0 2C			MOV		AL, ","
 000000F0  E8 00000000 E		CALL	WriteChar
 000000F5  B0 20			MOV		AL, " "
 000000F7  E8 00000000 E		CALL	WriteChar
 000000FC				_noSeparator:
 000000FC  E2 E1			LOOP	_displayArrayLoop
 000000FE  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Integer Sum / Average
				;    Calculate and display the sum and average of the integers
				; ----------------------------------------------------------------------------------------------------
 00000103  B9 00000003			MOV		ECX, LENGTHOF numArray
 00000108  BE 00000000 R		MOV		ESI, OFFSET numArray
 0000010D  B8 00000000			MOV		EAX, 0
 00000112  C7 05 000001B3 R		MOV		avg, 0
	   00000000
					; display the sum
					mDisplayString OFFSET sumMsg
 0000011C  52		     1		PUSH	EDX
 0000011D  BA 000001DC R     1		MOV		EDX, OFFSET sumMsg
 00000122  E8 00000000 E     1		CALL	WriteString
 00000127  5A		     1		POP		EDX
 00000128  FF 35 000001AF R		PUSH	sum
 0000012E  E8 0000020F			CALL	WriteVal
 00000133  E8 00000000 E		CALL	CrLf
					; calculate the average
 00000138  A1 000001AF R		MOV		EAX, sum
 0000013D  99				CDQ
 0000013E  BB 00000003			MOV		EBX, TEST_COUNT
 00000143  F7 FB			IDIV	EBX
 00000145  A3 000001B3 R		MOV		avg, EAX
					; display the average
					mDisplayString OFFSET avgMsg
 0000014A  52		     1		PUSH	EDX
 0000014B  BA 000001F9 R     1		MOV		EDX, OFFSET avgMsg
 00000150  E8 00000000 E     1		CALL	WriteString
 00000155  5A		     1		POP		EDX
 00000156  FF 35 000001B3 R		PUSH	avg
 0000015C  E8 000001E1			CALL	WriteVal
 00000161  E8 00000000 E		CALL	CrLf
 00000166  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; ReadFloatVal
				;    Test loop - build an array of floating point numbers
				; ----------------------------------------------------------------------------------------------------
 0000016B  B9 00000003			MOV		ECX, LENGTHOF floatArray
 00000170  BF 000002A8 R		MOV		EDI, OFFSET floatArray
 00000175  BA 000002C6 R		MOV		EDX, OFFSET digitCountArray
 0000017A  BB 00000000			MOV		EBX, 0								; EBX will hold the # of decimal point digits to display
 0000017F  C7 05 0000025A R		MOV		lineNum, 1
	   00000001
 00000189  9B DB E3			FINIT
 0000018C  D9 EE			FLDZ
 0000018E			_buildFloatArrayLoop:
					; print the line number
 0000018E  FF 35 0000025A R		PUSH	lineNum
 00000194  E8 000001A9			CALL	WriteVal
 00000199  B0 2D			MOV		AL, "-"
 0000019B  E8 00000000 E		CALL	WriteChar
					; get a number via ReadFloatVal, store into the currrent position of floatArray
 000001A0  52				PUSH	EDX
 000001A1  57				PUSH	EDI
 000001A2  68 00000311 R		PUSH	OFFSET invalidMsgFloat
 000001A7  68 000002EA R		PUSH	OFFSET promptFloat
 000001AC  E8 00000203			CALL	ReadFloatVal
					; see if the number of digits (after the decimal point) should be increased
 000001B1  39 1A			CMP		[EDX], EBX
 000001B3  72 02			JB		_skipUpdateMax
 000001B5  8B 1A			MOV		EBX, [EDX]
 000001B7				_skipUpdateMax:
					; add this value to the prior value on the stack; print it using WriteFloatVal
					mDisplayString OFFSET currSumMsg
 000001B7  52		     1		PUSH	EDX
 000001B8  BA 0000025E R     1		MOV		EDX, OFFSET currSumMsg
 000001BD  E8 00000000 E     1		CALL	WriteString
 000001C2  5A		     1		POP		EDX
 000001C3  DB 2F			FLD		REAL10 PTR [EDI]
 000001C5  DE C1			FADD
 000001C7  53				PUSH	EBX
 000001C8  E8 000002F1			CALL	WriteFloatVal
 000001CD  E8 00000000 E		CALL	CrLf
					; increment to the next position of numArray and digitCountArray
 000001D2  83 C7 0A			ADD		EDI, TYPE floatArray
 000001D5  83 C2 04			ADD		EDX, TYPE digitCountArray
 000001D8  FF 05 0000025A R		INC		lineNum
 000001DE  E2 AE			LOOP	_buildFloatArrayLoop
					; upon completion of the loop, store the current sum into memory
 000001E0  DB 3D 000002D2 R		FSTP	floatSum

				; ----------------------------------------------------------------------------------------------------
				; WriteFloatVal
				;    Test loop - display the array of float numbers
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET displayMsg
 000001E6  52		     1		PUSH	EDX
 000001E7  BA 000001B7 R     1		MOV		EDX, OFFSET displayMsg
 000001EC  E8 00000000 E     1		CALL	WriteString
 000001F1  5A		     1		POP		EDX
 000001F2  B9 00000003			MOV		ECX, LENGTHOF floatArray
 000001F7  BE 000002A8 R		MOV		ESI, OFFSET floatArray
 000001FC  BA 000002C6 R		MOV		EDX, OFFSET digitCountArray
 00000201			_displayFloatArrayLoop:
					; display the float in the current position of floatArray
 00000201  9B DB E3			FINIT
 00000204  DB 2E			FLD		REAL10 PTR [ESI]
 00000206  FF 32			PUSH	DWORD PTR [EDX]
 00000208  E8 000002B1			CALL	WriteFloatVal
					; inrement to the next position of numArray
 0000020D  83 C6 0A			ADD		ESI, TYPE floatArray
 00000210  83 C2 04			ADD		EDX, TYPE digitCountArray
					; print a comma and space before the next value
 00000213  83 F9 01			CMP		ECX, 1
 00000216  74 0E			JE		_skipSeparator
 00000218  B0 2C			MOV		AL, ","
 0000021A  E8 00000000 E		CALL	WriteChar
 0000021F  B0 20			MOV		AL, " "
 00000221  E8 00000000 E		CALL	WriteChar
 00000226				_skipSeparator:
 00000226  E2 D9			LOOP	_displayFloatArrayLoop
 00000228  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Float Sum / Aveage
				;    Calculate and display the sum and average of the numbers in the array
				; ----------------------------------------------------------------------------------------------------
					; calculate the average of the floatArray elemenets
 0000022D  9B DB E3			FINIT
 00000230  DB 2D 000002D2 R		FLD		floatSum
 00000236  DB 05 000002E6 R		FILD	testCount
 0000023C  DE F9			FDIV
 0000023E  DB 3D 000002DC R		FSTP	floatAvg
					; display the sum
					mDisplayString OFFSET sumMsg
 00000244  52		     1		PUSH	EDX
 00000245  BA 000001DC R     1		MOV		EDX, OFFSET sumMsg
 0000024A  E8 00000000 E     1		CALL	WriteString
 0000024F  5A		     1		POP		EDX
 00000250  DB 2D 000002D2 R		FLD		floatSum
 00000256  53				PUSH	EBX									; push the 'max digits' calculated above
 00000257  E8 00000262			CALL	WriteFloatVal
 0000025C  E8 00000000 E		CALL	CrLf
					; display the average
					mDisplayString OFFSET avgMsg
 00000261  52		     1		PUSH	EDX
 00000262  BA 000001F9 R     1		MOV		EDX, OFFSET avgMsg
 00000267  E8 00000000 E     1		CALL	WriteString
 0000026C  5A		     1		POP		EDX
 0000026D  DB 2D 000002DC R		FLD		floatAvg
 00000273  53				PUSH	EBX									; push the 'max digits' calculated above
 00000274  E8 00000245			CALL	WriteFloatVal
 00000279  E8 00000000 E		CALL	CrLf
 0000027E  E8 00000000 E		CALL	CrLf


				; ----------------------------------------------------------------------------------------------------
				; Goodbye
				;    Display goodbye message
				; ----------------------------------------------------------------------------------------------------
					mDisplayString OFFSET goodbyeMsg
 00000283  52		     1		PUSH	EDX
 00000284  BA 00000212 R     1		MOV		EDX, OFFSET goodbyeMsg
 00000289  E8 00000000 E     1		CALL	WriteString
 0000028E  5A		     1		POP		EDX

					Invoke ExitProcess,0	; exit to operating system
 0000028F  6A 00	   *	    push   +000000000h
 00000291  E8 00000000 E   *	    call   ExitProcess
 00000296			main ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadVal
				; Description: Prompts the user to enter a signed number, and stores that number into a memory variable
				; Preconditions: the inputted number must fit into a SDWORD
				; Postconditions: prompt and/or error message is printed to the console
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the integer number will be saved
				; Returns:  signed number is saved into the memory address
				; ------------------------------------------------------------------------------------
 00000296			ReadVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:DWORD, priorAccumulator:SDWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 00000296  55		   *	    push   ebp
 00000297  8B EC	   *	    mov    ebp, esp
 00000299  83 C4 DC	   *	    add    esp, 0FFFFFFDCh
 0000029C  50				PUSH	EAX
 0000029D  53				PUSH	EBX
 0000029E  51				PUSH	ECX
 0000029F  52				PUSH	EDX
 000002A0  56				PUSH	ESI
 000002A1  57				PUSH	EDI
 000002A2			_getString:
 000002A2  8D 75 DC			LEA		ESI, stringNumber
 000002A5  8D 7D F0			LEA		EDI, bytesInputted
 000002A8  C7 45 F4			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 000002AF  52		     1		PUSH	EDX
 000002B0  51		     1		PUSH	ECX
 000002B1  50		     1		PUSH	EAX
 000002B2  8B 55 08	     1		MOV		EDX, [EBP + 8]
 000002B5  E8 00000000 E     1		CALL	WriteString
 000002BA  8B D6	     1		MOV		EDX, ESI
 000002BC  8B 4D F4	     1		MOV		ECX, maxBytes
 000002BF  E8 00000000 E     1		CALL	ReadString
 000002C4  8B FF	     1		MOV		EDI, EDI
 000002C6  89 07	     1		MOV		[EDI], EAX
 000002C8  58		     1		POP		EAX
 000002C9  59		     1		POP		ECX
 000002CA  5A		     1		POP		EDX
					; set up the registers
 000002CB  8B 4D F0			MOV		ECX, bytesInputted			; length of string as the counter	
 000002CE  8D 75 DC			LEA		ESI, stringNumber			; address of the integer string as source
 000002D1  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (SDWORD)
 000002D4  C7 45 FC			MOV		sign, 0						; set up the sign as 0 (for positive)
	   00000000
 000002DB  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 000002DC  AC				LODSB
 000002DD  3C 2B			CMP		AL, 43
 000002DF  74 13			JE		_plusSymbol
 000002E1  3C 2D			CMP		AL, 45
 000002E3  74 08			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; empty accumulator to set up the loop
 000002E5  4E				DEC		ESI
 000002E6  B8 00000000			MOV		EAX, 0
 000002EB  EB 0F			JMP		_charLoop

 000002ED			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 000002ED  C7 45 FC			MOV		sign, 1
	   00000001
 000002F4			_plusSymbol:
					; for either symbol, decrement the char count; empty accumulator to set up the loop
 000002F4  49				DEC		ECX
 000002F5  B8 00000000			MOV		EAX, 0
 000002FA  EB 00			JMP		_charLoop

 000002FC			_charLoop:
					; multiply accumulator by 10 and temporarily store into local variable
 000002FC  BB 0000000A			MOV		EBX, 10
 00000301  F7 EB			IMUL	EBX
 00000303  70 26			JO		_notValid
 00000305  89 45 F8			MOV		priorAccumulator, EAX
					; load the integer string digit, subtract by 48 to convert from ASCII to integer number
 00000308  B8 00000000			MOV		EAX, 0					; empty the upper range of the accumulator
 0000030D  AC				LODSB
 0000030E  3C 30			CMP		AL, 48
 00000310  72 19			JB		_notValid
 00000312  3C 39			CMP		AL, 57
 00000314  77 15			JA		_notValid
 00000316  2C 30			SUB		AL, 48
					; if sign is negative, change the value to negative
 00000318  83 7D FC 00			CMP		sign, 0
 0000031C  74 02			JE		_positive
 0000031E  F7 D8			NEG		EAX	
 00000320			_positive:
					; add the prior accumulator to this number and loop to next digit
 00000320  03 45 F8			ADD		EAX, priorAccumulator
 00000323  70 06			JO		_notValid
 00000325  E2 D5			LOOP	_charLoop
					; store final value into the output and end
 00000327  89 07			MOV		[EDI], EAX
 00000329  EB 0D			JMP		_end

 0000032B			_notValid:
					; print an error message to the user and go back to get another string
 0000032B  8B 55 0C			MOV		EDX, [EBP + 12]
 0000032E  E8 00000000 E		CALL	WriteString
 00000333  E9 FFFFFF6A			JMP		_getString

 00000338			_end:
					; restore registers and return
 00000338  5F				POP		EDI
 00000339  5E				POP		ESI
 0000033A  5A				POP		EDX
 0000033B  59				POP		ECX
 0000033C  5B				POP		EBX
 0000033D  58				POP		EAX
 0000033E  C9		   *	    leave  
 0000033F  C2 000C			RET		12
 00000342			ReadVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteVal
				; Description: Given a signed integer, converts the integer to a string and prints to the console
				; Preconditions: integer is a SDWORD or DWORD
				; Postconditions: integer is printed to the console
				; Receives: 
				;	[EBP + 8] = value of the number to convert to string & display
				; Returns: none
				; ------------------------------------------------------------------------------------
 00000342			WriteVal PROC
					; preserve registers
					LOCAL	number:SDWORD, sign:DWORD, stringNumber[20]:BYTE
 00000342  55		   *	    push   ebp
 00000343  8B EC	   *	    mov    ebp, esp
 00000345  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 00000348  50				PUSH	EAX
 00000349  53				PUSH	EBX
 0000034A  51				PUSH	ECX
 0000034B  52				PUSH	EDX
 0000034C  56				PUSH	ESI
 0000034D  57				PUSH	EDI
					
					; set up initial registers
 0000034E  8B 75 08			MOV		ESI, [EBP + 8]
 00000351  89 75 FC			MOV		number, ESI					; move the number into local variable
 00000354  C7 45 F8			MOV		sign, 1						; set up the sign as 1 (for positive)
	   00000001
 0000035B  B9 00000014			MOV		ECX, LENGTHOF stringNumber	; length of destination in BYTES
 00000360  8D 7D E4			LEA		EDI, stringNumber			; address of destination (BYTE string)
 00000363  03 F9			ADD		EDI, ECX
 00000365  4F				DEC		EDI						; starting address + length - 1 = last element in string
 00000366  FD				STD								; set the direction flag (to increment backwards)

					; put a null-terminator as the last element in destination string
 00000367  B0 00			MOV		AL, 0
 00000369  AA				STOSB

					; if number is negative, set the sign to be -1 (for negative) then convert number to positive
 0000036A  83 7D FC 00			CMP		number, 0
 0000036E  7D 0A			JGE		_digitToStringLoop
 00000370  C7 45 F8			MOV		sign, -1
	   FFFFFFFF
 00000377  F7 5D FC			NEG		number

 0000037A			_digitToStringLoop:
					; divide the number by 10, store the quotient as the next iteration's starting number
 0000037A  8B 45 FC			MOV		EAX, number
 0000037D  BA 00000000			MOV		EDX, 0
 00000382  BB 0000000A			MOV		EBX, 10
 00000387  F7 F3			DIV		EBX
 00000389  89 45 FC			MOV		number, EAX
					; convert the remainder into its ASCII representation and store in the array
 0000038C  8B C2			MOV		EAX, EDX
 0000038E  04 30			ADD		AL, 48
 00000390  AA				STOSB
					; if the quotient is zero, the last digit has been reached
 00000391  83 7D FC 00			CMP		number, 0
 00000395  75 E3			JNE		_digitToStringLoop

					; if the sign was negative, prepend a '-' symbol
 00000397  83 7D F8 FF			CMP		sign, -1
 0000039B  75 03			JNE		_displayString
 0000039D  B0 2D			MOV		AL, "-"
 0000039F  AA				STOSB

 000003A0			_displayString:
 000003A0  47				INC		EDI
					mDisplayString EDI
 000003A1  52		     1		PUSH	EDX
 000003A2  8B D7	     1		MOV		EDX, EDI
 000003A4  E8 00000000 E     1		CALL	WriteString
 000003A9  5A		     1		POP		EDX

 000003AA			_end:
					; restore registers and return
 000003AA  5F				POP		EDI
 000003AB  5E				POP		ESI
 000003AC  5A				POP		EDX
 000003AD  59				POP		ECX
 000003AE  5B				POP		EBX
 000003AF  58				POP		EAX
 000003B0  C9		   *	    leave  
 000003B1  C2 0004			RET		4
 000003B4			WriteVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadFloatVal
				; Description: prompts the user to enter a floating point number, converts it to REAL10, and stores in memory
				; Preconditions: FINIT must be initialized prior to calling ReadFloatVal; inputted number must fit in REAL10
				; Postconditions: prompt and/or error message is printed to the console
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the flot number will be saved
				;	[EBP + 20] = address of the location to which the number of digits inputted will be saved
				; Returns: the number in REAL10 format is saved into the given memory address
				; ------------------------------------------------------------------------------------
 000003B4			ReadFloatVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:SDWORD, ten:DWORD, digit:DWORD, isLeadingZero:DWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 000003B4  55		   *	    push   ebp
 000003B5  8B EC	   *	    mov    ebp, esp
 000003B7  83 C4 D4	   *	    add    esp, 0FFFFFFD4h
 000003BA  50				PUSH	EAX
 000003BB  53				PUSH	EBX
 000003BC  51				PUSH	ECX
 000003BD  52				PUSH	EDX
 000003BE  56				PUSH	ESI
 000003BF  57				PUSH	EDI
 000003C0			_getString:
 000003C0  8D 75 D4			LEA		ESI, stringNumber
 000003C3  8D 7D E8			LEA		EDI, bytesInputted
 000003C6  C7 45 EC			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 000003CD  52		     1		PUSH	EDX
 000003CE  51		     1		PUSH	ECX
 000003CF  50		     1		PUSH	EAX
 000003D0  8B 55 08	     1		MOV		EDX, [EBP + 8]
 000003D3  E8 00000000 E     1		CALL	WriteString
 000003D8  8B D6	     1		MOV		EDX, ESI
 000003DA  8B 4D EC	     1		MOV		ECX, maxBytes
 000003DD  E8 00000000 E     1		CALL	ReadString
 000003E2  8B FF	     1		MOV		EDI, EDI
 000003E4  89 07	     1		MOV		[EDI], EAX
 000003E6  58		     1		POP		EAX
 000003E7  59		     1		POP		ECX
 000003E8  5A		     1		POP		EDX
					; set up the registers
 000003E9  8B 55 14			MOV		EDX, [EBP + 20]
 000003EC  C7 02 00000000		MOV		DWORD PTR [EDX], 0			; holds a count of the number of digits inputted (needed for WriteFloatVal)
 000003F2  8B 4D E8			MOV		ECX, bytesInputted			; length of string as the counter	
 000003F5  8D 75 D4			LEA		ESI, stringNumber			; address of the integer string as source
 000003F8  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (REAL10)
 000003FB  C7 45 F0			MOV		isLeadingZero, 1			; set up a condition check for trailing zeros; this helps turn '9.9000' into '9.9' 
	   00000001
 00000402  C7 45 FC			MOV		sign, 1						; set up the sign as 1 (for positive)
	   00000001
 00000409  C7 45 F8			MOV		ten, 10						; put the value ten into a memory variable for FPU calcs
	   0000000A
 00000410  D9 EE			FLDZ								; set ST(0) to zero
 00000412  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 00000413  AC				LODSB
 00000414  3C 2B			CMP		AL, 43
 00000416  74 0E			JE		_plusSymbol
 00000418  3C 2D			CMP		AL, 45
 0000041A  74 03			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; set ST(0) as zero
 0000041C  4E				DEC		ESI
 0000041D  EB 0A			JMP		_intLoop

 0000041F			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 0000041F  C7 45 FC			MOV		sign, -1
	   FFFFFFFF
 00000426			_plusSymbol:
					; for either symbol, decrement the char count; set ST(0) as zero
 00000426  49				DEC		ECX
 00000427  EB 00			JMP		_intLoop


 00000429			_intLoop:
					; get the next digit in the string; validate & convert from ASCII to integer number
 00000429  B8 00000000			MOV		EAX, 0
 0000042E  AC				LODSB
 0000042F  3C 2E			CMP		AL, 46
 00000431  74 22			JE		_decimalPoint
 00000433  3C 30			CMP		AL, 48
 00000435  72 70			JB		_notValid
 00000437  3C 39			CMP		AL, 57
 00000439  77 6C			JA		_notValid
 0000043B  2C 30			SUB		AL, 48
					; multiply the prior value on the stack by 10
 0000043D  DB 45 F8			FILD	ten
 00000440  DE C9			FMUL
					; load the digit onto the FPU stack
 00000442  89 45 F4			MOV		digit, EAX
 00000445  DB 45 F4			FILD	digit
					; multiply the value by the sign (either 1 or -1)
 00000448  DB 45 FC			FILD	sign
 0000044B  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 0000044D  DE C1			FADD
 0000044F  E2 D8			LOOP	_intLoop
					; if all digits are read and no decimal point was reached, store final value into the output and end
 00000451  DB 3F			FSTP	REAL10 PTR [EDI]
 00000453  EB 5F			JMP		_end


 00000455			_decimalPoint:
					; start building the fractional part of the number
 00000455  49				DEC		ECX					; decrement ECX to account for the decimal point character
 00000456  8D 75 D4			LEA		ESI, stringNumber	; change the address to the end of the string
 00000459  03 75 E8			ADD		ESI, bytesInputted
 0000045C  4E				DEC		ESI
 0000045D  FD				STD							; set the direction flag to increment backwards
 0000045E  D9 EE			FLDZ						; ST(1) holds the 'integer part'; initialize 'fractional part' at ST(0) as the value zero


 00000460			_floatLoop:
					; divide the prior value on the FPU stack by 10
 00000460  DB 45 F8			FILD	ten
 00000463  DE F9			FDIV
					; get the next digit in the string; validate & convert from ASCII to integer number
 00000465  B8 00000000			MOV		EAX, 0
 0000046A  AC				LODSB
 0000046B  3C 30			CMP		AL, 48
 0000046D  72 38			JB		_notValid
 0000046F  3C 39			CMP		AL, 57
 00000471  77 34			JA		_notValid
 00000473  2C 30			SUB		AL, 48
					; if the digit is not a zero, increment the digit counter
 00000475  3C 00			CMP		AL, 0
 00000477  75 08			JNE		_incrementDigits
					; if the digit is a zero, but it is not a trailing zero (i.e. the zero in 9.908), increment the digit counter
 00000479  83 7D F0 01			CMP		isLeadingZero, 1
 0000047D  75 02			JNE		_incrementDigits
					; otherwise, skip incrementing the digit counter
 0000047F  EB 0C			JMP		_skipIncrementDigits
 00000481				_incrementDigits:
 00000481  8B 55 14			MOV		EDX, [EBP + 20]
 00000484  FF 02			INC		DWORD PTR [EDX]
 00000486  C7 45 F0			MOV		isLeadingZero, 0
	   00000000
 0000048D				_skipIncrementDigits:
					; load the value onto the FPU stack and divide it by 10
 0000048D  89 45 F4			MOV		digit, EAX
 00000490  DB 45 F4			FILD	digit
 00000493  DB 45 F8			FILD	ten
 00000496  DE F9			FDIV
					; multiply the value by the sign (either 1 or -1)
 00000498  DB 45 FC			FILD	sign
 0000049B  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 0000049D  DE C1			FADD
 0000049F  E2 BF			LOOP	_floatLoop
					; upon completion of all the 'fractional part' digits, add the integer part at ST(1) to the fractional part at ST(0)
 000004A1  DE C1			FADD
 000004A3  DB 3F			FSTP	REAL10 PTR [EDI]
 000004A5  EB 0D			JMP		_end


 000004A7			_notValid:
					; print an error message to the user and go back to get another string
 000004A7  8B 55 0C			MOV		EDX, [EBP + 12]
 000004AA  E8 00000000 E		CALL	WriteString
 000004AF  E9 FFFFFF0C			JMP		_getString


 000004B4			_end:
					; restore registers and return
 000004B4  5F				POP		EDI
 000004B5  5E				POP		ESI
 000004B6  5A				POP		EDX
 000004B7  59				POP		ECX
 000004B8  5B				POP		EBX
 000004B9  58				POP		EAX
 000004BA  C9		   *	    leave  
 000004BB  C2 0010			RET		16
 000004BE			ReadFloatVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteFloatVal
				; Description: Given a number in REAL10, converts the number to a string and prints to console
				; Preconditions: FPU stack is initialized with the given number at ST(0) in REAL10
				; Postconditions: number is printed to the console
				; Receives: 
				;	ST(0)	  = the float number to write
				;	[EBP + 8] = the number digits in the number (e.g. 987.1259 has 7 digits)
				; Returns:  none
				; ------------------------------------------------------------------------------------
 000004BE			WriteFloatVal PROC
					LOCAL ten:DWORD, roundNormal:WORD, roundDown:WORD, exponent:DWORD, digit:DWORD, stringNumber[20]:BYTE, remainder:REAL10
 000004BE  55		   *	    push   ebp
 000004BF  8B EC	   *	    mov    ebp, esp
 000004C1  83 C4 D0	   *	    add    esp, 0FFFFFFD0h
 000004C4  50				PUSH	EAX
 000004C5  53				PUSH	EBX
 000004C6  51				PUSH	ECX
 000004C7  52				PUSH	EDX
 000004C8  56				PUSH	ESI
 000004C9  57				PUSH	EDI


					; set up the initial register and local variable values
 000004CA  D9 C0			FLD		ST(0)							; create a copy of the number so as to not overwrite it
 000004CC  C7 45 FC			MOV		ten, 10							; variable 10 used for FPU arithmetic
	   0000000A
 000004D3  C7 45 F4			MOV		exponent, 0						; will hold the number of digits the dec point is shifted
	   00000000
 000004DA  C7 45 F0			MOV		digit, 0						; will hold the current digit in the string
	   00000000
 000004E1  8D 7D DC			LEA		EDI, stringNumber				; EDI holds the address of the string representation
 000004E4  FC				CLD										; iterate forwards through array
 000004E5  B8 00000000			MOV		EAX, 0							; clear the accumulator
 000004EA  8B 4D 08			MOV		ECX, [EBP + 8]					; holds the number of digits after the decimal point (e.g. 3 for above example)
 000004ED  66| C7 45 F8			MOV		roundDown, 0000011101111111b	; default control word
	   077F
 000004F3  66| C7 45 FA			MOV		roundNormal, 0000001101111111b	; control word setting RC to round down
	   037F
 000004F9  D9 6D F8			FLDCW	roundDown						; set control word RC to roundDown


					; if ST(0) is negative, add a '-' as the first character in the string and convert to positive
 000004FC  D9 E4			FTST									; instruction for: CMP ST(0), 0.0
 000004FE  DF E0			FNSTSW	AX
 00000500  9E				SAHF									; copy status word into EFLAGS
 00000501  73 05			JAE		_SciNotationLoop
 00000503  B0 2D			MOV		AL, "-"
 00000505  AA				STOSB
 00000506  D9 E1			FABS									; change float to absolute value	


					; this code block transforms '978.875' into '9.78875' while tracking the # of decimal point moves (into 'exponent' variable)
 00000508			_SciNotationLoop:
					; check if the float is truncated to one digit
 00000508  DB 55 F0			FIST	digit
 0000050B  83 7D F0 0A			CMP		digit, 10
 0000050F  72 0A			JB		_intToStringLoop
					; othwerwise divide the float by 10 and increment count of decimal point moves
 00000511  DB 45 FC			FILD	ten
 00000514  DE F9			FDIV
 00000516  FF 45 F4			INC		exponent
 00000519  EB ED			JMP		_SciNotationLoop


					; at this point, the float is at ST(0) and looks like '9.78875' and exponent would hold '2'
					; this code block dumps the integer part into a string representation digit by digit
 0000051B			_intToStringLoop:
					; if there are no digits after the decimal point AND the exponent is zero, change rounding methodology
 0000051B  83 F9 00			CMP		ECX, 0
 0000051E  75 09			JNE		_continue
 00000520  83 7D F4 00			CMP		exponent, 0
 00000524  75 03			JNE		_continue
 00000526  D9 6D FA			FLDCW	roundNormal
 00000529				_continue:
					; add the leading digit to the string
 00000529  DB 55 F0			FIST	digit
 0000052C  8B 45 F0			MOV		EAX, digit
 0000052F  83 C0 30			ADD		EAX, 48
 00000532  AA				STOSB
					; subtract the digit from the float (e.g. 9.78875 - 9 = 0.78875)
 00000533  DB 45 F0			FILD	digit
 00000536  DE E9			FSUB
					; multiply that value by 10 to move the decimal point (e.g. 0.78875 * 10 = 7.8875)
 00000538  DB 45 FC			FILD	ten
 0000053B  DE C9			FMUL
					; if the exponent counter == 0, add a decimal point to string, otherwise loop back to keep adding the integer parts
 0000053D  83 7D F4 00			CMP		exponent, 0
 00000541  74 05			JE		_decimalPoint
 00000543  FF 4D F4			DEC		exponent
 00000546  EB D3			JMP		_intToStringLoop


					; add a decimal point to the string, set up the loop for the digits after the decimal point
 00000548			_decimalPoint:
					; if there are no digits after the decimal point, then jump to end
 00000548  83 F9 00			CMP		ECX, 0
 0000054B  74 23			JE		_end
 0000054D  B0 2E			MOV		AL, "."
 0000054F  AA				STOSB


					; this code block dumps the digits after the decimal point into the a string
 00000550			_floatToStringLoop:
					; if this is the NOT the final digit continue rounding down; if it is the final digit, change rounding methodology to normal
 00000550  83 F9 01			CMP		ECX, 1
 00000553  75 03			JNE		_roundDown
 00000555  D9 6D FA			FLDCW	roundNormal
 00000558				_roundDown:
 00000558  DB 55 F0			FIST	digit
					; add the digit to the string
 0000055B  8B 45 F0			MOV		EAX, digit
 0000055E  83 C0 30			ADD		EAX, 48
 00000561  AA				STOSB
					; subtract the digit from the float (e.g. 9.78875 - 9 = 0.78875)
 00000562  DB 45 F0			FILD	digit
 00000565  DE E9			FSUB
					; multiply that value by 10 to move the decimal point (e.g. 0.78875 * 10 = 7.8875)
 00000567  DB 45 FC			FILD	ten
 0000056A  DE C9			FMUL
 0000056C  E2 E2			LOOP	_floatToStringLoop
 0000056E  EB 00			JMP		_end
					
 00000570			_end:
					; add a null-terminator as the final string character
 00000570  DB 7D D2			FSTP	remainder
 00000573  B8 00000000			MOV		EAX, 0
 00000578  AA				STOSB
					; display the string
 00000579  8D 75 DC			LEA		ESI, stringNumber
					mDisplayString ESI
 0000057C  52		     1		PUSH	EDX
 0000057D  8B D6	     1		MOV		EDX, ESI
 0000057F  E8 00000000 E     1		CALL	WriteString
 00000584  5A		     1		POP		EDX


					; restore registers and return
 00000585  5F				POP		EDI
 00000586  5E				POP		ESI
 00000587  5A				POP		EDX
 00000588  59				POP		ECX
 00000589  5B				POP		EBX
 0000058A  58				POP		EAX
 0000058B  C9		   *	    leave  
 0000058C  C2 0004			RET		4
 0000058F			WriteFloatVal ENDP



				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/09/21 00:05:07
4String Primitives and Macros     (Proj6_bairdjo.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000374 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000058F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloatVal . . . . . . . . . .	P Near	 000003B4 _TEXT	Length= 0000010A Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  ten  . . . . . . . . . . . . .	DWord	 bp - 00000008
  digit  . . . . . . . . . . . .	DWord	 bp - 0000000C
  isLeadingZero  . . . . . . . .	DWord	 bp - 00000010
  maxBytes . . . . . . . . . . .	DWord	 bp - 00000014
  bytesInputted  . . . . . . . .	DWord	 bp - 00000018
  stringNumber . . . . . . . . .	Byte	 bp - 0000002C
  _getString . . . . . . . . . .	L Near	 000003C0 _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 0000041F _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 00000426 _TEXT	
  _intLoop . . . . . . . . . . .	L Near	 00000429 _TEXT	
  _decimalPoint  . . . . . . . .	L Near	 00000455 _TEXT	
  _floatLoop . . . . . . . . . .	L Near	 00000460 _TEXT	
  _incrementDigits . . . . . . .	L Near	 00000481 _TEXT	
  _skipIncrementDigits . . . . .	L Near	 0000048D _TEXT	
  _notValid  . . . . . . . . . .	L Near	 000004A7 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000004B4 _TEXT	
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000296 _TEXT	Length= 000000AC Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  priorAccumulator . . . . . . .	DWord	 bp - 00000008
  maxBytes . . . . . . . . . . .	DWord	 bp - 0000000C
  bytesInputted  . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  _getString . . . . . . . . . .	L Near	 000002A2 _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 000002ED _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 000002F4 _TEXT	
  _charLoop  . . . . . . . . . .	L Near	 000002FC _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000320 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 0000032B _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000338 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloatVal  . . . . . . . . .	P Near	 000004BE _TEXT	Length= 000000D1 Public STDCALL
  ten  . . . . . . . . . . . . .	DWord	 bp - 00000004
  roundNormal  . . . . . . . . .	Word	 bp - 00000006
  roundDown  . . . . . . . . . .	Word	 bp - 00000008
  exponent . . . . . . . . . . .	DWord	 bp - 0000000C
  digit  . . . . . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  remainder  . . . . . . . . . .	TByte	 bp - 0000002E
  _SciNotationLoop . . . . . . .	L Near	 00000508 _TEXT	
  _intToStringLoop . . . . . . .	L Near	 0000051B _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000529 _TEXT	
  _decimalPoint  . . . . . . . .	L Near	 00000548 _TEXT	
  _floatToStringLoop . . . . . .	L Near	 00000550 _TEXT	
  _roundDown . . . . . . . . . .	L Near	 00000558 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000570 _TEXT	
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000342 _TEXT	Length= 00000072 Public STDCALL
  number . . . . . . . . . . . .	DWord	 bp - 00000004
  sign . . . . . . . . . . . . .	DWord	 bp - 00000008
  stringNumber . . . . . . . . .	Byte	 bp - 0000001C
  _digitToStringLoop . . . . . .	L Near	 0000037A _TEXT	
  _displayString . . . . . . . .	L Near	 000003A0 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000003AA _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000296 Public STDCALL
  _buildArrayLoop  . . . . . . .	L Near	 00000078 _TEXT	
  _displayArrayLoop  . . . . . .	L Near	 000000DF _TEXT	
  _noSeparator . . . . . . . . .	L Near	 000000FC _TEXT	
  _buildFloatArrayLoop . . . . .	L Near	 0000018E _TEXT	
  _skipUpdateMax . . . . . . . .	L Near	 000001B7 _TEXT	
  _displayFloatArrayLoop . . . .	L Near	 00000201 _TEXT	
  _skipSeparator . . . . . . . .	L Near	 00000226 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEST_COUNT . . . . . . . . . . .	Number	 00000003h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 000001F9 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 000001B3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currSumMsg . . . . . . . . . . .	Byte	 0000025E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digitCountArray  . . . . . . . .	DWord	 000002C6 _DATA	
displayMsg . . . . . . . . . . .	Byte	 000001B7 _DATA	
ecMsg1 . . . . . . . . . . . . .	Byte	 00000229 _DATA	
ecMsg2 . . . . . . . . . . . . .	Byte	 00000273 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
floatArray . . . . . . . . . . .	TByte	 000002A8 _DATA	
floatAvg . . . . . . . . . . . .	TByte	 000002DC _DATA	
floatDigit . . . . . . . . . . .	DWord	 00000370 _DATA	
floatNum . . . . . . . . . . . .	TByte	 00000366 _DATA	
floatSum . . . . . . . . . . . .	TByte	 000002D2 _DATA	
goodbyeMsg . . . . . . . . . . .	Byte	 00000212 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 0000000C _DATA	
instructions . . . . . . . . . .	Byte	 00000051 _DATA	
invalidMsgFloat  . . . . . . . .	Byte	 00000311 _DATA	
invalidMsg . . . . . . . . . . .	Byte	 00000168 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineNum  . . . . . . . . . . . .	DWord	 0000025A _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
promptFloat  . . . . . . . . . .	Byte	 000002EA _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000149 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumMsg . . . . . . . . . . . . .	Byte	 000001DC _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001AF _DATA	
testCount  . . . . . . . . . . .	DWord	 000002E6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
