Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/08/21 17:12:39
4String Primitives and Macros     (Proj6_bairdjo.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_bairdjo.asm)

				; Author: Jon Baird
				; Last Modified: 3/4/2021
				; OSU email address: bairdjo@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number: 6                Due Date: 3/14/2021
				; Description: This program reads 10 signed integers from the user via console input
				;              then calculates the sum and average and displays to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mGetString MACRO promptAddress:REQ, outputAddress:REQ, size:REQ, bytesReadAddress:REQ
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					MOV		EDX, promptAddress
					CALL	WriteString
					MOV		EDX, outputAddress
					MOV		ECX, size
					CALL	ReadString
					MOV		EDI, bytesReadAddress
					MOV		[EDI], EAX
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				mDisplayString MACRO stringAddress:REQ
					PUSH	EDX
					MOV		EDX, stringAddress
					CALL	WriteString
					POP		EDX
				ENDM


				; (insert constant definitions here)
 = 0000000A			TEST_COUNT = 10
				;MAX_NUM = 2147483647
				;MIN_NUM = -2147483648


 00000000			.data
 00000000  0000000A [		numArray		SDWORD	TEST_COUNT DUP(?)
	    00000000
	   ]
 00000028 50 72 6F 6A 65	greeting		BYTE	"Project 6: Designing low-level I/O procedures.     By: Jon Baird",13,10,13,10,0
	   63 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   2E 20 20 20 20
	   20 42 79 3A 20
	   4A 6F 6E 20 42
	   61 69 72 64 0D
	   0A 0D 0A 00
 0000006D 50 6C 65 61 73	instructions	BYTE	"Please provide 10 signed decimal integers. ",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 0D 0A
	   45 61 63 68 20
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A 41 66 74
	   65 72 20 79 6F
	   75 20 68 61 76
	   65 20 66 69 6E
	   69 73 68 65 64
	   20 69 6E 70 75
	   74 74 69 6E 67
	   20 74 68 65 20
	   72 61 77 20 6E
	   75 6D 62 65 72
	   73 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 0D 0A 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 0D 0A
	   0D 0A 00
										"Each number needs to be small enough to fit inside a 32 bit register. ",13,10,
										"After you have finished inputting the raw numbers I will display a list of the integers, ",13,10,
										"their sum, and their average value.",13,10,13,10,0
 00000165 50 6C 65 61 73	prompt			BYTE	"Please enter a signed intger: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   67 65 72 3A 20
	   00
 00000184 45 52 52 4F 52	invalidMsg		BYTE	"ERROR. You did not enter a signed number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00

 000001CB 00000000		sum				SDWORD	?
 000001CF 00000000		average			SDWORD	?
 000001D3 59 6F 75 20 65	displayMsg		BYTE	"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001F8 54 68 65 20 73	sumMsg			BYTE	"The sum of these number is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 20 69
	   73 3A 20 00
 00000215 54 68 65 20 72	avgMsg			BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 0000022E 54 68 61 6E 6B	goodbyeMsg		BYTE	"Thanks for playing! ",13,10,"And while the course was a great learning experience, ",
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   0D 0A 41 6E 64
	   20 77 68 69 6C
	   65 20 74 68 65
	   20 63 6F 75 72
	   73 65 20 77 61
	   73 20 61 20 67
	   72 65 61 74 20
	   6C 65 61 72 6E
	   69 6E 67 20 65
	   78 70 65 72 69
	   65 6E 63 65 2C
	   20 49 27 6D 20
	   72 65 6C 69 65
	   76 65 64 20 74
	   68 69 73 20 69
	   73 20 74 68 65
	   20 6C 61 73 74
	   20 61 73 73 65
	   6D 62 6C 79 20
	   61 73 73 69 67
	   6E 6D 65 6E 74
	   20 3A 29 0D 0A
	   00
										"I'm relieved this is the last assembly assignment :)",13,10,0

				; EXTRA CREDIT variables
 000002B1			floatNum		REAL10	?
	   00000000000000000000
 000002BB 00000000		digitsInputted	DWORD	0
 000002BF 50 6C 65 61 73	promptFloat		BYTE	"Please enter a floating point number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000002E6 45 52 52 4F 52	invalidMsgFloat	BYTE	"ERROR. You did not enter a valid floating point number or your number was too big.",13,10,0
	   2E 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 76 61 6C
	   69 64 20 66 6C
	   6F 61 74 69 6E
	   67 20 70 6F 69
	   6E 74 20 6E 75
	   6D 62 65 72 20
	   6F 72 20 79 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 74
	   6F 6F 20 62 69
	   67 2E 0D 0A 00


 00000000			.code
 00000000			main PROC
					; introduce the program
					mDisplayString OFFSET greeting
 00000000  52		     1		PUSH	EDX
 00000001  BA 00000028 R     1		MOV		EDX, OFFSET greeting
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX
					mDisplayString OFFSET instructions
 0000000C  52		     1		PUSH	EDX
 0000000D  BA 0000006D R     1		MOV		EDX, OFFSET instructions
 00000012  E8 00000000 E     1		CALL	WriteString
 00000017  5A		     1		POP		EDX
					
					; TESTING THE FLOAT PROCEDURE
 00000018  68 000002BB R		PUSH	OFFSET digitsInputted
 0000001D  68 000002B1 R		PUSH	OFFSET floatNum
 00000022  68 000002E6 R		PUSH	OFFSET invalidMsgFloat
 00000027  68 000002BF R		PUSH	OFFSET promptFloat
 0000002C  E8 000001F5			CALL	ReadFloatVal
					;MOV		EAX, digitsInputted
					;CALL	WriteDec
					;CALL	CrLf
					;FINIT
					;FLD		floatNum
					;CALL	WriteFloat
 00000031  9B DB E3			FINIT
 00000034  DB 2D 000002B1 R		FLD		floatNum
 0000003A  FF 35 000002BB R		PUSH	digitsInputted
 00000040  E8 000002E5			CALL	WriteFloatVal


					; perform the test loop - get the numbers
 00000045  B9 0000000A			MOV		ECX, LENGTHOF numArray
 0000004A  BF 00000000 R		MOV		EDI, OFFSET numArray
 0000004F			_buildArrayLoop:
					; get a number via ReadVal, store into the currrent position of numArray
 0000004F  57				PUSH	EDI
 00000050  68 00000184 R		PUSH	OFFSET invalidMsg
 00000055  68 00000165 R		PUSH	OFFSET prompt
 0000005A  E8 000000A9			CALL	ReadVal
					; increment to the next position of numArray, empty the input paramater, and repeat
 0000005F  83 C7 04			ADD		EDI, TYPE numArray
 00000062  E2 EB			LOOP	_buildArrayLoop


					; display the numbers
					mDisplayString OFFSET displayMsg
 00000064  52		     1		PUSH	EDX
 00000065  BA 000001D3 R     1		MOV		EDX, OFFSET displayMsg
 0000006A  E8 00000000 E     1		CALL	WriteString
 0000006F  5A		     1		POP		EDX
 00000070  B9 0000000A			MOV		ECX, LENGTHOF numArray
 00000075  BE 00000000 R		MOV		ESI, OFFSET numArray
 0000007A			_displayArrayLoop:
					; add the number in the current position of numArray to sum, and display it using WriteVal
 0000007A  8B 1E			MOV		EBX, [ESI]
 0000007C  01 1D 000001CB R		ADD		sum, EBX
 00000082  FF 36			PUSH	[ESI]
 00000084  E8 0000012B			CALL	WriteVal
					; inrement to the next position of numArray, empty the output paramater, and repeat
 00000089  83 C6 04			ADD		ESI, TYPE numArray
					; print a comma and space before the next value
 0000008C  83 F9 01			CMP		ECX, 1
 0000008F  74 0E			JE		_noSeparator
 00000091  B0 2C			MOV		AL, ","
 00000093  E8 00000000 E		CALL	WriteChar
 00000098  B0 20			MOV		AL, " "
 0000009A  E8 00000000 E		CALL	WriteChar
 0000009F				_noSeparator:
 0000009F  E2 D9			LOOP	_displayArrayLoop

					; display the sum
 000000A1  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET sumMsg
 000000A6  52		     1		PUSH	EDX
 000000A7  BA 000001F8 R     1		MOV		EDX, OFFSET sumMsg
 000000AC  E8 00000000 E     1		CALL	WriteString
 000000B1  5A		     1		POP		EDX
 000000B2  FF 35 000001CB R		PUSH	sum
 000000B8  E8 000000F7			CALL	WriteVal

					; calculate the average
 000000BD  E8 00000000 E		CALL	CrLf
 000000C2  A1 000001CB R		MOV		EAX, sum
 000000C7  99				CDQ
 000000C8  BB 0000000A			MOV		EBX, TEST_COUNT
 000000CD  F7 FB			IDIV	EBX
 000000CF  A3 000001CF R		MOV		average, EAX

					; display the average
					mDisplayString OFFSET avgMsg
 000000D4  52		     1		PUSH	EDX
 000000D5  BA 00000215 R     1		MOV		EDX, OFFSET avgMsg
 000000DA  E8 00000000 E     1		CALL	WriteString
 000000DF  5A		     1		POP		EDX
 000000E0  FF 35 000001CF R		PUSH	average
 000000E6  E8 000000C9			CALL	WriteVal
 000000EB  E8 00000000 E		CALL	CrLf
 000000F0  E8 00000000 E		CALL	CrLf

					; display goodbye
					mDisplayString OFFSET goodbyeMsg
 000000F5  52		     1		PUSH	EDX
 000000F6  BA 0000022E R     1		MOV		EDX, OFFSET goodbyeMsg
 000000FB  E8 00000000 E     1		CALL	WriteString
 00000100  5A		     1		POP		EDX

					Invoke ExitProcess,0	; exit to operating system
 00000101  6A 00	   *	    push   +000000000h
 00000103  E8 00000000 E   *	    call   ExitProcess
 00000108			main ENDP

				; ------------------------------------------------------------------------------------
				; Name: ReadVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the integer number will be saved
				; Returns:  [++++++++++++TBU++++++++++++]
				;
				; ------------------------------------------------------------------------------------
 00000108			ReadVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:DWORD, priorAccumulator:SDWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 00000108  55		   *	    push   ebp
 00000109  8B EC	   *	    mov    ebp, esp
 0000010B  83 C4 DC	   *	    add    esp, 0FFFFFFDCh
 0000010E  50				PUSH	EAX
 0000010F  53				PUSH	EBX
 00000110  51				PUSH	ECX
 00000111  52				PUSH	EDX
 00000112  56				PUSH	ESI
 00000113  57				PUSH	EDI
 00000114			_getString:
 00000114  8D 75 DC			LEA		ESI, stringNumber
 00000117  8D 7D F0			LEA		EDI, bytesInputted
 0000011A  C7 45 F4			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 00000121  52		     1		PUSH	EDX
 00000122  51		     1		PUSH	ECX
 00000123  50		     1		PUSH	EAX
 00000124  8B 55 08	     1		MOV		EDX, [EBP + 8]
 00000127  E8 00000000 E     1		CALL	WriteString
 0000012C  8B D6	     1		MOV		EDX, ESI
 0000012E  8B 4D F4	     1		MOV		ECX, maxBytes
 00000131  E8 00000000 E     1		CALL	ReadString
 00000136  8B FF	     1		MOV		EDI, EDI
 00000138  89 07	     1		MOV		[EDI], EAX
 0000013A  58		     1		POP		EAX
 0000013B  59		     1		POP		ECX
 0000013C  5A		     1		POP		EDX
					; set up the registers
 0000013D  8B 4D F0			MOV		ECX, bytesInputted			; length of string as the counter	
 00000140  8D 75 DC			LEA		ESI, stringNumber			; address of the integer string as source
 00000143  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (SDWORD)
 00000146  C7 45 FC			MOV		sign, 0						; set up the sign as 0 (for positive)
	   00000000
 0000014D  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 0000014E  AC				LODSB
 0000014F  3C 2B			CMP		AL, 43
 00000151  74 13			JE		_plusSymbol
 00000153  3C 2D			CMP		AL, 45
 00000155  74 08			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; empty accumulator to set up the loop
 00000157  4E				DEC		ESI
 00000158  B8 00000000			MOV		EAX, 0
 0000015D  EB 0F			JMP		_charLoop

 0000015F			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 0000015F  C7 45 FC			MOV		sign, 1
	   00000001
 00000166			_plusSymbol:
					; for either symbol, decrement the char count; empty accumulator to set up the loop
 00000166  49				DEC		ECX
 00000167  B8 00000000			MOV		EAX, 0
 0000016C  EB 00			JMP		_charLoop

 0000016E			_charLoop:
					; multiply accumulator by 10 and temporarily store into local variable
 0000016E  BB 0000000A			MOV		EBX, 10
 00000173  F7 EB			IMUL	EBX
 00000175  70 26			JO		_notValid
 00000177  89 45 F8			MOV		priorAccumulator, EAX
					; load the integer string digit, subtract by 48 to convert from ASCII to integer number
 0000017A  B8 00000000			MOV		EAX, 0					; empty the upper range of the accumulator
 0000017F  AC				LODSB
 00000180  3C 30			CMP		AL, 48
 00000182  72 19			JB		_notValid
 00000184  3C 39			CMP		AL, 57
 00000186  77 15			JA		_notValid
 00000188  2C 30			SUB		AL, 48
					; if sign is negative, change the value to negative
 0000018A  83 7D FC 00			CMP		sign, 0
 0000018E  74 02			JE		_positive
 00000190  F7 D8			NEG		EAX	
 00000192			_positive:
					; add the prior accumulator to this number and loop to next digit
 00000192  03 45 F8			ADD		EAX, priorAccumulator
 00000195  70 06			JO		_notValid
 00000197  E2 D5			LOOP	_charLoop
					; store final value into the output and end
 00000199  89 07			MOV		[EDI], EAX
 0000019B  EB 0D			JMP		_end

 0000019D			_notValid:
					; print an error message to the user and go back to get another string
 0000019D  8B 55 0C			MOV		EDX, [EBP + 12]
 000001A0  E8 00000000 E		CALL	WriteString
 000001A5  E9 FFFFFF6A			JMP		_getString

 000001AA			_end:
					; restore registers and return
 000001AA  5F				POP		EDI
 000001AB  5E				POP		ESI
 000001AC  5A				POP		EDX
 000001AD  59				POP		ECX
 000001AE  5B				POP		EBX
 000001AF  58				POP		EAX
 000001B0  C9		   *	    leave  
 000001B1  C2 000C			RET		12
 000001B4			ReadVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++] [the address of the location is long enough to store the value plus a null terminator (i.e. 12)]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	[EBP + 8] = value of the number to convert to string & display
				; Returns: [++++++++++++TBU++++++++++++]
				; ------------------------------------------------------------------------------------
 000001B4			WriteVal PROC
					; preserve registers
					LOCAL	number:SDWORD, sign:DWORD, stringNumber[20]:BYTE
 000001B4  55		   *	    push   ebp
 000001B5  8B EC	   *	    mov    ebp, esp
 000001B7  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 000001BA  50				PUSH	EAX
 000001BB  53				PUSH	EBX
 000001BC  51				PUSH	ECX
 000001BD  52				PUSH	EDX
 000001BE  56				PUSH	ESI
 000001BF  57				PUSH	EDI
					
					; set up initial registers
 000001C0  8B 75 08			MOV		ESI, [EBP + 8]
 000001C3  89 75 FC			MOV		number, ESI					; move the number into local variable
 000001C6  C7 45 F8			MOV		sign, 0						; set up the sign as 0 (for positive)
	   00000000
 000001CD  B9 00000014			MOV		ECX, LENGTHOF stringNumber	; length of destination in BYTES
 000001D2  8D 7D E4			LEA		EDI, stringNumber			; address of destination (BYTE string)
 000001D5  03 F9			ADD		EDI, ECX
 000001D7  4F				DEC		EDI						; starting address + length - 1 = last element in string
 000001D8  FD				STD								; set the direction flag (to increment backwards)

					; put a null-terminator as the last element in destination string
 000001D9  B0 00			MOV		AL, 0
 000001DB  AA				STOSB

					; if number is negative, make the first element of the string a '-', then convert number to positive
 000001DC  83 7D FC 00			CMP		number, 0
 000001E0  7D 0A			JGE		_digitToStringLoop
 000001E2  C7 45 F8			MOV		sign, 1
	   00000001
 000001E9  F7 5D FC			NEG		number

 000001EC			_digitToStringLoop:
					; divide the number by 10, store the quotient as the next iteration's starting number
 000001EC  8B 45 FC			MOV		EAX, number
 000001EF  BA 00000000			MOV		EDX, 0
 000001F4  BB 0000000A			MOV		EBX, 10
 000001F9  F7 F3			DIV		EBX
 000001FB  89 45 FC			MOV		number, EAX
					; convert the remainder into its ASCII representation and store in the array
 000001FE  8B C2			MOV		EAX, EDX
 00000200  04 30			ADD		AL, 48
 00000202  AA				STOSB
					; if the quotient is zero, the last digit has been reached
 00000203  83 7D FC 00			CMP		number, 0
 00000207  75 E3			JNE		_digitToStringLoop

					; if the sign was negative, prepend a '-' symbol
 00000209  83 7D F8 01			CMP		sign, 1
 0000020D  75 03			JNE		_displayString
 0000020F  B0 2D			MOV		AL, "-"
 00000211  AA				STOSB

 00000212			_displayString:
 00000212  47				INC		EDI
					mDisplayString EDI
 00000213  52		     1		PUSH	EDX
 00000214  8B D7	     1		MOV		EDX, EDI
 00000216  E8 00000000 E     1		CALL	WriteString
 0000021B  5A		     1		POP		EDX

 0000021C			_end:
					; restore registers and return
 0000021C  5F				POP		EDI
 0000021D  5E				POP		ESI
 0000021E  5A				POP		EDX
 0000021F  59				POP		ECX
 00000220  5B				POP		EBX
 00000221  58				POP		EAX
 00000222  C9		   *	    leave  
 00000223  C2 0004			RET		4
 00000226			WriteVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadFloatVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	[EBP + 8] = address of a prompt to display to the user
				;	[EBP + 12] = address of the message if the input was invalid.
				;	[EBP + 16] = address of the location to which the flot number will be saved
				;	[EBP + 20] = address of the location to which the number of digits inputted will be saved
				; Returns:  [++++++++++++TBU++++++++++++]
				; ------------------------------------------------------------------------------------
 00000226			ReadFloatVal PROC
					; set up local variables and preserve registers
					LOCAL	sign:SDWORD, zero:DWORD, ten:DWORD, digit:DWORD, maxBytes:DWORD, bytesInputted:DWORD, stringNumber[20]:BYTE
 00000226  55		   *	    push   ebp
 00000227  8B EC	   *	    mov    ebp, esp
 00000229  83 C4 D4	   *	    add    esp, 0FFFFFFD4h
 0000022C  50				PUSH	EAX
 0000022D  53				PUSH	EBX
 0000022E  51				PUSH	ECX
 0000022F  52				PUSH	EDX
 00000230  56				PUSH	ESI
 00000231  57				PUSH	EDI
 00000232			_getString:
 00000232  8D 75 D4			LEA		ESI, stringNumber
 00000235  8D 7D E8			LEA		EDI, bytesInputted
 00000238  C7 45 EC			MOV		maxBytes, LENGTHOF stringNumber
	   00000014
					mGetString [EBP + 8], ESI, maxBytes, EDI
 0000023F  52		     1		PUSH	EDX
 00000240  51		     1		PUSH	ECX
 00000241  50		     1		PUSH	EAX
 00000242  8B 55 08	     1		MOV		EDX, [EBP + 8]
 00000245  E8 00000000 E     1		CALL	WriteString
 0000024A  8B D6	     1		MOV		EDX, ESI
 0000024C  8B 4D EC	     1		MOV		ECX, maxBytes
 0000024F  E8 00000000 E     1		CALL	ReadString
 00000254  8B FF	     1		MOV		EDI, EDI
 00000256  89 07	     1		MOV		[EDI], EAX
 00000258  58		     1		POP		EAX
 00000259  59		     1		POP		ECX
 0000025A  5A		     1		POP		EDX
					; set up the registers
 0000025B  8B 55 14			MOV		EDX, [EBP + 20]
 0000025E  C7 02 00000000		MOV		DWORD PTR [EDX], 0			; holds a count of the number of digits inputted (needed for WriteFloatVal)
 00000264  8B 4D E8			MOV		ECX, bytesInputted			; length of string as the counter	
 00000267  8D 75 D4			LEA		ESI, stringNumber			; address of the integer string as source
 0000026A  8B 7D 10			MOV		EDI, [EBP + 16]				; address of destination (REAL10)
 0000026D  C7 45 FC			MOV		sign, 1						; set up the sign as 1 (for positive)
	   00000001
 00000274  C7 45 F4			MOV		ten, 10						; put the value ten into a memory variable for FPU calcs
	   0000000A
 0000027B  C7 45 F8			MOV		zero, 0						; put the value zero into a memory variable for FPU calcs
	   00000000
 00000282  9B DB E3			FINIT								; initialize the FPU
 00000285  FC				CLD									; iterate forwards through array
					
					; see if the first digit is a '+' or a '-'
 00000286  AC				LODSB
 00000287  3C 2B			CMP		AL, 43
 00000289  74 11			JE		_plusSymbol
 0000028B  3C 2D			CMP		AL, 45
 0000028D  74 06			JE		_minusSymbol
					; if no symbol, decrement ESI in order to re-evaluate that digit again; empty accumulator to set up the loop
 0000028F  4E				DEC		ESI
 00000290  DB 45 F8			FILD	zero
 00000293  EB 0D			JMP		_intLoop

 00000295			_minusSymbol:
					; if first digit is a '-' change the sign to 1 (for negative)
 00000295  C7 45 FC			MOV		sign, -1
	   FFFFFFFF
 0000029C			_plusSymbol:
					; for either symbol, decrement the char count; empty accumulator to set up the loop
 0000029C  49				DEC		ECX
 0000029D  DB 45 F8			FILD	zero
 000002A0  EB 00			JMP		_intLoop


 000002A2			_intLoop:
					; get the next digit in the string; validate & convert from ASCII to integer number
 000002A2  B8 00000000			MOV		EAX, 0
 000002A7  AC				LODSB
 000002A8  3C 2E			CMP		AL, 46
 000002AA  74 27			JE		_decimalPoint
 000002AC  3C 30			CMP		AL, 48
 000002AE  72 63			JB		_notValid
 000002B0  3C 39			CMP		AL, 57
 000002B2  77 5F			JA		_notValid
 000002B4  2C 30			SUB		AL, 48
					; increment the count of digits inputted
 000002B6  8B 55 14			MOV		EDX, [EBP + 20]
 000002B9  FF 02			INC		DWORD PTR [EDX]
					; multiply the prior value on the stack by 10
 000002BB  DB 45 F4			FILD	ten
 000002BE  DE C9			FMUL
					; load the digit onto the FPU stack
 000002C0  89 45 F0			MOV		digit, EAX
 000002C3  DB 45 F0			FILD	digit
					; multiply the value by the sign (either 1 or -1)
 000002C6  DB 45 FC			FILD	sign
 000002C9  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 000002CB  DE C1			FADD
 000002CD  E2 D3			LOOP	_intLoop

					; if all digits are read and no decimal point was reached, store final value into the output and end
 000002CF  DB 3F			FSTP	REAL10 PTR [EDI]
 000002D1  EB 4D			JMP		_end


 000002D3			_decimalPoint:
					; start building the fractional part of the number
 000002D3  49				DEC		ECX					; decrement ECX to account for the decimal point character
 000002D4  8D 75 D4			LEA		ESI, stringNumber	; change the address to the end of the string
 000002D7  03 75 E8			ADD		ESI, bytesInputted
 000002DA  4E				DEC		ESI
 000002DB  FD				STD							; set the direction flag to increment backwards
 000002DC  DB 45 F8			FILD	zero				; ST(1) holds the 'integer part'; initialize 'fractional part' at ST(0) as the value zero

 000002DF			_floatLoop:
					; divide the prior value on the FPU stack by 10
 000002DF  DB 45 F4			FILD	ten
 000002E2  DE F9			FDIV
					; get the next digit in the string; validate & convert from ASCII to integer number
 000002E4  B8 00000000			MOV		EAX, 0
 000002E9  AC				LODSB
 000002EA  3C 30			CMP		AL, 48
 000002EC  72 25			JB		_notValid
 000002EE  3C 39			CMP		AL, 57
 000002F0  77 21			JA		_notValid
 000002F2  2C 30			SUB		AL, 48
					; increment the count of digits inputted
 000002F4  8B 55 14			MOV		EDX, [EBP + 20]
 000002F7  FF 02			INC		DWORD PTR [EDX]
					; load the value onto the FPU stack and divide it by 10
 000002F9  89 45 F0			MOV		digit, EAX
 000002FC  DB 45 F0			FILD	digit
 000002FF  DB 45 F4			FILD	ten
 00000302  DE F9			FDIV
					; multiply the value by the sign (either 1 or -1)
 00000304  DB 45 FC			FILD	sign
 00000307  DE C9			FMUL
					; add this value to the prior value on the stack and loop to next digit
 00000309  DE C1			FADD
 0000030B  E2 D2			LOOP	_floatLoop

					; upon completion of all the 'fractional part' digits, add the integer part at ST(1) to the fractional part at ST(0)
 0000030D  DE C1			FADD
 0000030F  DB 3F			FSTP	REAL10 PTR [EDI]
 00000311  EB 0D			JMP		_end


 00000313			_notValid:
					; print an error message to the user and go back to get another string
 00000313  8B 55 0C			MOV		EDX, [EBP + 12]
 00000316  E8 00000000 E		CALL	WriteString
 0000031B  E9 FFFFFF12			JMP		_getString


 00000320			_end:
					; restore registers and return
 00000320  5F				POP		EDI
 00000321  5E				POP		ESI
 00000322  5A				POP		EDX
 00000323  59				POP		ECX
 00000324  5B				POP		EBX
 00000325  58				POP		EAX
 00000326  C9		   *	    leave  
 00000327  C2 0010			RET		16
 0000032A			ReadFloatVal ENDP


				; ------------------------------------------------------------------------------------
				; Name: WriteFloatVal
				; Description: [++++++++++++TBU++++++++++++]
				; Preconditions: [++++++++++++TBU++++++++++++]
				; Postconditions: [++++++++++++TBU++++++++++++]
				; Receives: 
				;	ST(0)	  = the float number to write
				;	[EBP + 8] = the number digits in the number (e.g. 987.1259 has 7 digits)
				; Returns:  [++++++++++++TBU++++++++++++]
				; ------------------------------------------------------------------------------------
 0000032A			WriteFloatVal PROC
					LOCAL ten:DWORD, roundNormal:WORD, roundDown: WORD, exponent:DWORD, digit:DWORD, stringNumber[20]:BYTE
 0000032A  55		   *	    push   ebp
 0000032B  8B EC	   *	    mov    ebp, esp
 0000032D  83 C4 DC	   *	    add    esp, 0FFFFFFDCh
 00000330  50				PUSH	EAX
 00000331  53				PUSH	EBX
 00000332  51				PUSH	ECX
 00000333  52				PUSH	EDX
 00000334  56				PUSH	ESI
 00000335  57				PUSH	EDI


					; set up the initial register and local variable values
 00000336  C7 45 FC			MOV		ten, 10							; variable 10 used for FPU arithmetic
	   0000000A
 0000033D  C7 45 F4			MOV		exponent, 0						; will hold the number of digits the dec point is shifted
	   00000000
 00000344  C7 45 F0			MOV		digit, 0						; will hold the current digit in the string
	   00000000
 0000034B  8D 7D DC			LEA		EDI, stringNumber				; EDI holds the address of the string representation
 0000034E  FC				CLD										; iterate forwards through array
 0000034F  8B 4D 08			MOV		ECX, [EBP + 8]					; counter holds the number of digits in the number
 00000352  B8 00000000			MOV		EAX, 0							; clear the accumulator
 00000357  66| C7 45 F8			MOV		roundDown, 0000011101111111b	; default control word
	   077F
 0000035D  66| C7 45 FA			MOV		roundNormal, 0000001101111111b	; control word setting RC to round down
	   037F
 00000363  D9 6D F8			FLDCW	roundDown						; set control word RC to roundDown


					; if ST(0) is negative, add a '-' as the first character in the string and convert to positive
 00000366  D9 E4			FTST									; instruction for: CMP ST(0), 0.0
 00000368  DF E0			FNSTSW	AX
 0000036A  9E				SAHF									; copy status word into EFLAGS
 0000036B  73 05			JAE		_SciNotationLoop
 0000036D  B0 2D			MOV		AL, "-"
 0000036F  AA				STOSB
 00000370  D9 E1			FABS									; change float to absolute value	


					; this code block transforms '978.875' into '9.78875' while tracking the # of decimal point moves (into 'exponent' variable)
 00000372			_SciNotationLoop:
					; check if the float is truncated to one digit
 00000372  DB 55 F0			FIST	digit
 00000375  83 7D F0 0A			CMP		digit, 10
 00000379  72 0A			JB		_toStringLoop
					; othwerwise divide the float by 10 and increment count of decimal point moves
 0000037B  DB 45 FC			FILD	ten
 0000037E  DE F9			FDIV
 00000380  FF 45 F4			INC		exponent
 00000383  EB ED			JMP		_SciNotationLoop


					; at this point, the float is at ST(0) and looks like '9.78875' and exponent holds '2'
					; this code block dumps the float into a string representation digit by digit; ECX has the number of digits (e.g. 6 for above example)
 00000385			_toStringLoop:
					; if this is the NOT the final digit round down; if it is the final digit, round it (change control WORD to default)
 00000385  83 F9 01			CMP		ECX, 1
 00000388  75 03			JNE		_roundDown
 0000038A  D9 6D FA			FLDCW	roundNormal
 0000038D				_roundDown:
 0000038D  DB 55 F0			FIST	digit
					; add the digit to the string
 00000390  8B 45 F0			MOV		EAX, digit
 00000393  83 C0 30			ADD		EAX, 48
 00000396  AA				STOSB
					; subtract the digit from the float (e.g. 9.78875 - 9 = 0.78875)
 00000397  DB 45 F0			FILD	digit
 0000039A  DE E9			FSUB
					; multiply that value by 10 to move the decimal point (e.g. 0.78875 * 10 = 7.8875)
 0000039C  DB 45 FC			FILD	ten
 0000039F  DE C9			FMUL
					; if the exponent counter == 0, add a decimal point to the string output
 000003A1  83 7D F4 00			CMP		exponent, 0
 000003A5  75 03			JNE		_skipDecimal
 000003A7  B0 2E			MOV		AL, "."
 000003A9  AA				STOSB
 000003AA				_skipDecimal:	
 000003AA  FF 4D F4			DEC		exponent
 000003AD  E2 D6			LOOP	_toStringLoop
					

					; add a null-terminator as the final string character
 000003AF  B8 00000000			MOV		EAX, 0
 000003B4  AA				STOSB
					; display the string
 000003B5  8D 75 DC			LEA		ESI, stringNumber
					mDisplayString ESI
 000003B8  52		     1		PUSH	EDX
 000003B9  8B D6	     1		MOV		EDX, ESI
 000003BB  E8 00000000 E     1		CALL	WriteString
 000003C0  5A		     1		POP		EDX


					; restore registers and return
 000003C1  5F				POP		EDI
 000003C2  5E				POP		ESI
 000003C3  5A				POP		EDX
 000003C4  59				POP		ECX
 000003C5  5B				POP		EBX
 000003C6  58				POP		EAX
 000003C7  C9		   *	    leave  
 000003C8  C2 0004			RET		4
 000003CB			WriteFloatVal ENDP



				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/08/21 17:12:39
4String Primitives and Macros     (Proj6_bairdjo.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000033B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003CB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloatVal . . . . . . . . . .	P Near	 00000226 _TEXT	Length= 00000104 Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  zero . . . . . . . . . . . . .	DWord	 bp - 00000008
  ten  . . . . . . . . . . . . .	DWord	 bp - 0000000C
  digit  . . . . . . . . . . . .	DWord	 bp - 00000010
  maxBytes . . . . . . . . . . .	DWord	 bp - 00000014
  bytesInputted  . . . . . . . .	DWord	 bp - 00000018
  stringNumber . . . . . . . . .	Byte	 bp - 0000002C
  _getString . . . . . . . . . .	L Near	 00000232 _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 00000295 _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 0000029C _TEXT	
  _intLoop . . . . . . . . . . .	L Near	 000002A2 _TEXT	
  _decimalPoint  . . . . . . . .	L Near	 000002D3 _TEXT	
  _floatLoop . . . . . . . . . .	L Near	 000002DF _TEXT	
  _notValid  . . . . . . . . . .	L Near	 00000313 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000320 _TEXT	
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000108 _TEXT	Length= 000000AC Public STDCALL
  sign . . . . . . . . . . . . .	DWord	 bp - 00000004
  priorAccumulator . . . . . . .	DWord	 bp - 00000008
  maxBytes . . . . . . . . . . .	DWord	 bp - 0000000C
  bytesInputted  . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  _getString . . . . . . . . . .	L Near	 00000114 _TEXT	
  _minusSymbol . . . . . . . . .	L Near	 0000015F _TEXT	
  _plusSymbol  . . . . . . . . .	L Near	 00000166 _TEXT	
  _charLoop  . . . . . . . . . .	L Near	 0000016E _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000192 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 0000019D _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001AA _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloatVal  . . . . . . . . .	P Near	 0000032A _TEXT	Length= 000000A1 Public STDCALL
  ten  . . . . . . . . . . . . .	DWord	 bp - 00000004
  roundNormal  . . . . . . . . .	Word	 bp - 00000006
  roundDown  . . . . . . . . . .	Word	 bp - 00000008
  exponent . . . . . . . . . . .	DWord	 bp - 0000000C
  digit  . . . . . . . . . . . .	DWord	 bp - 00000010
  stringNumber . . . . . . . . .	Byte	 bp - 00000024
  _SciNotationLoop . . . . . . .	L Near	 00000372 _TEXT	
  _toStringLoop  . . . . . . . .	L Near	 00000385 _TEXT	
  _roundDown . . . . . . . . . .	L Near	 0000038D _TEXT	
  _skipDecimal . . . . . . . . .	L Near	 000003AA _TEXT	
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001B4 _TEXT	Length= 00000072 Public STDCALL
  number . . . . . . . . . . . .	DWord	 bp - 00000004
  sign . . . . . . . . . . . . .	DWord	 bp - 00000008
  stringNumber . . . . . . . . .	Byte	 bp - 0000001C
  _digitToStringLoop . . . . . .	L Near	 000001EC _TEXT	
  _displayString . . . . . . . .	L Near	 00000212 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000021C _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000108 Public STDCALL
  _buildArrayLoop  . . . . . . .	L Near	 0000004F _TEXT	
  _displayArrayLoop  . . . . . .	L Near	 0000007A _TEXT	
  _noSeparator . . . . . . . . .	L Near	 0000009F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEST_COUNT . . . . . . . . . . .	Number	 0000000Ah   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 000001CF _DATA	
avgMsg . . . . . . . . . . . . .	Byte	 00000215 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digitsInputted . . . . . . . . .	DWord	 000002BB _DATA	
displayMsg . . . . . . . . . . .	Byte	 000001D3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
floatNum . . . . . . . . . . . .	TByte	 000002B1 _DATA	
goodbyeMsg . . . . . . . . . . .	Byte	 0000022E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000028 _DATA	
instructions . . . . . . . . . .	Byte	 0000006D _DATA	
invalidMsgFloat  . . . . . . . .	Byte	 000002E6 _DATA	
invalidMsg . . . . . . . . . . .	Byte	 00000184 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
promptFloat  . . . . . . . . . .	Byte	 000002BF _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000165 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumMsg . . . . . . . . . . . . .	Byte	 000001F8 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001CB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
